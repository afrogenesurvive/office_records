{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js\";\nimport React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport SidebarPage from './Sidebar';\nimport SidebarControl from '../components/SidebarControl';\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSystematicInquiryForm from '../components/Forms/UpdatePatientSystematicInquiryForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientVigilanceForm from '../components/Forms/UpdatePatientVigilanceForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      creating: false,\n      updating: false,\n      searching: false,\n      updatingArray: false,\n      deleting: false,\n      patients: [],\n      searchPatients: [],\n      isLoading: false,\n      selectedPatient: null,\n      selectedUser: null,\n      patientUpdateField: null,\n      patientSearchField: null,\n      patientSearchQuery: null,\n      canDelete: null,\n      visit: null,\n      visitList: [],\n      selectedVisit: null,\n      newVisit: false,\n      createVisitChecklist: {\n        consultant: false,\n        complaint: false,\n        diagnosis: false,\n        examination: false,\n        investigation: false,\n        survey: false,\n        systematicInquiry: false,\n        treatment: false,\n        vitals: false,\n        billing: false,\n        vigilance: false\n      },\n      newVisit: false,\n      userAlert: null,\n      overlay: false,\n      overlayStatus: \"test\",\n      showAttachment: false,\n      showThisAttachmentFile: null,\n      showThisAttachmentType: null,\n      creatingDocument: false,\n      createPdf: false,\n      pdfData: null,\n      pdfType: null,\n      sidebarShow: true,\n      mCol1Size: 3,\n      mCol2Size: 9\n    };\n    this.isActive = true;\n\n    this.startCreatePatientHandler = () => {\n      this.setState({\n        creating: true\n      });\n    };\n\n    this.startCreateVisitHandler = () => {\n      this.setState({\n        newVisit: true\n      });\n    };\n\n    this.startUpdatePatientHandler = () => {\n      this.setState({\n        updating: true,\n        updatingArray: true\n      });\n    };\n\n    this.startSearchPatientHandler = () => {\n      this.setState({\n        searching: true\n      });\n    };\n\n    this.modalConfirmHandler = event => {\n      this.setState({\n        creating: false,\n        userAlert: \"Creating New Patient ...\"\n      });\n      const userId = this.context.userId;\n      const token = this.context.token;\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n\n      if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n        registrationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientCalendarRegistrationDate.value !== null && event.target.formGridRegistrationDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0, 10));\n        registrationDate = new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0, 10);\n      }\n\n      let referralDate = event.target.formGridReferralDate.value;\n\n      if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n        referralDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientCalendarReferralDate.value !== null && event.target.formGridReferralDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0, 10));\n        referralDate = new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0, 10);\n      }\n\n      let expirationDate = event.target.formGridExpirationDate.value;\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (name.trim().length === 0 || age.trim().length === 0 || addressNumber.trim().length === 0 || addressStreet.trim().length === 0 || contactPhone.trim().length === 0 || registrationDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      }; // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        this.setState({\n          userAlert: responseAlert\n        });\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n          return {\n            patients: updatedPatients\n          };\n        });\n        this.setState({\n          selecteAppointment: resData.data.createPatient\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false\n      });\n    };\n\n    this.modalConfirmUpdateHandler = event => {\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      const token = this.context.token;\n      this.setState({\n        updating: false,\n        userAlert: \"Updating selected Patient...\"\n      });\n      let title = event.target.formGridTitle.value;\n      let name = event.target.formGridName.value;\n      let dob = event.target.formGridDob.value;\n      let age = event.target.formGridAge.value;\n      let gender = event.target.formGridGender.value;\n      let addressNumber = event.target.formGridAddressNumber.value;\n      let addressStreet = event.target.formGridAddressStreet.value;\n      let addressTown = event.target.formGridAddressTown.value;\n      let addressParish = event.target.formGridAddressParish.value;\n      let addressPostOffice = event.target.formGridAddressPostOffice.value;\n      let contactPhone = event.target.formGridContactPhone.value;\n      let contactEmail = event.target.formGridContactEmail.value;\n      let registrationDate = event.target.formGridRegistrationDate.value;\n\n      if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n        registrationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientCalendarRegistrationDate.value !== null && event.target.formGridRegistrationDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0, 10));\n        registrationDate = new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0, 10);\n      }\n\n      let referralDate = event.target.formGridReferralDate.value;\n\n      if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n        referralDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientCalendarReferralDate.value !== null && event.target.formGridReferralDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0, 10));\n        referralDate = new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0, 10);\n      }\n\n      let expirationDate = event.target.formGridExpirationDate.value;\n\n      if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n        expirationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientCalendarExpirationDate.value !== null && event.target.formGridExpirationDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientCalendarExpirationDate.value).toISOString().slice(0, 10));\n        expirationDate = new Date(event.target.patientCalendarExpirationDate.value).toISOString().slice(0, 10);\n      }\n\n      let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n      let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n      let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n      let referringDoctorName = event.target.formGridReferringDoctorName.value;\n      let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n      let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n      let occupationRole = event.target.formGridOccupationRole.value;\n      let occupationEmployer = event.target.formGridOccupationEmployer.value;\n      let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n      let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n      if (title.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        title = this.context.selectedPatient.title;\n      }\n\n      if (name.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        name = this.context.selectedPatient.name;\n      }\n\n      if (dob.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        dob = this.context.selectedPatient.dob;\n      }\n\n      if (gender.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        gender = this.context.selectedPatient.gender;\n      }\n\n      if (age.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        age = this.context.selectedPatient.age;\n      }\n\n      if (addressNumber.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressNumber = this.context.selectedPatient.address.number;\n      }\n\n      if (addressStreet.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressStreet = this.context.selectedPatient.address.street;\n      }\n\n      if (addressTown.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressTown = this.context.selectedPatient.address.town;\n      }\n\n      if (addressParish.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressParish = this.context.selectedPatient.address.parish;\n      }\n\n      if (addressPostOffice.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        addressPostOffice = this.context.selectedPatient.address.postOffice;\n      }\n\n      if (contactPhone.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        contactPhone = this.context.selectedPatient.contact.phone;\n      }\n\n      if (contactEmail.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        contactEmail = this.context.selectedPatient.contact.email;\n      }\n\n      if (registrationDate.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        registrationDate = this.context.selectedPatient.registrationDate;\n      }\n\n      if (attendingPhysicianName.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n      }\n\n      if (attendingPhysicianEmail.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n      }\n\n      if (attendingPhysicianPhone.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n      }\n\n      if (referringDoctorName.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n      }\n\n      if (referringDoctorEmail.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n      }\n\n      if (referringDoctorPhone.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n      }\n\n      if (occupationRole.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        occupationRole = this.context.selectedPatient.occupation.role;\n      }\n\n      if (occupationEmployer.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        occupationEmployer = this.context.selectedPatient.occupation.employer;\n      }\n\n      if (occupationEmployerContactEmail.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n      }\n\n      if (occupationEmployerContactPhone.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...filling w/ previous data...\"\n        });\n        occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatient\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmUpdateFieldHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        userAlert: \"Updating selected Patient by Field...\"\n      });\n      let field = null;\n      let query = event.target.formGridQuery.value;\n\n      if (event.target.formGridFieldSelect.value === \"select\") {\n        field = event.target.formGridField.value;\n      } else {\n        field = event.target.formGridFieldSelect.value;\n      }\n\n      const requestBody = {\n        query: `\n        mutation {updatePatientField(userId:\"${userId}\",patientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientField._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientField);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientField\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientConsultantHandler = event => {\n      event.preventDefault();\n      let token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      const patientConsultantReference = this.context.selectedUser._id;\n\n      if (patientConsultantReference === undefined) {\n        this.setState({\n          userAlert: \"select a Staff member before adding a Patient Consultant!!...\"\n        });\n        token = null;\n      }\n\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Consultant...\"\n      });\n      let consultantDate = null;\n\n      if (event.target.formGridConsultantDate) {\n        consultantDate = event.target.formGridConsultantDate.value;\n      }\n\n      if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n        consultantDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientConsultantCalendarDate.value !== null && event.target.formGridConsultantDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientConsultantCalendarDate.value).toISOString().slice(0, 10));\n        consultantDate = new Date(event.target.patientConsultantCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientConsultant\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInsuranceHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Insurance...\"\n      });\n      let insuranceCompany = event.target.formGridInsuranceCompany.value;\n      let insuranceNumber = event.target.formGridInsuranceNumber.value;\n      let insuranceExpiry = event.target.patientCalendarInsuranceExpiryDate.value; // if (event.target.patientCalendarInsuranceExpiryDate.value !== null &&\n      //   event.target.formGridInsuranceExpiry.value === null\n      //   ) {\n      //   console.log(`patientCalendarInsuranceExpiryDate: ${new Date(event.target.patientCalendarInsuranceExpiryDate.value).toISOString().slice(0,10)} `);\n      //   insuranceExpiry = new Date(event.target.patientCalendarInsuranceExpiryDate.value).toISOString().slice(0,10);\n      // }\n\n      let insuranceDescription = event.target.formGridInsuranceDescription.value;\n      let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n      let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n      const requestBody = {\n        query: `\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientInsurance\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNextOfKinHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Next of Kin...\"\n      });\n      let nextOfKinName = event.target.formGridNextOfKinName.value;\n      let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n      let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n      const requestBody = {\n        query: `\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientNextOfKin\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientComplaintHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Complaint...\"\n      });\n      let complaintTitle = event.target.formGridComplaintTitle.value;\n      let complaintDate = null;\n\n      if (event.target.formGridComplaintDate) {\n        complaintDate = event.target.formGridComplaintDate.value;\n      }\n\n      if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n        complaintDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientComplaintCalendarDate.value !== null && event.target.formGridComplaintDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientComplaintCalendarDate.value).toISOString().slice(0, 10));\n        complaintDate = new Date(event.target.patientComplaintCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      let complaintDescription = event.target.formGridComplaintDescription.value;\n      let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n      let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n      let complaintAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/complaints\";\n      let file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: complaintAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const complaintAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientComplaint\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientSurveyHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Survey...\"\n      });\n      let surveyDate = null;\n\n      if (event.target.formGridSurveyDate) {\n        surveyDate = event.target.formGridSurveyDate.value;\n      }\n\n      if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n        surveyDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientSurveyCalendarDate.value !== null && event.target.formGridSurveyDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientSurveyCalendarDate.value).toISOString().slice(0, 10));\n        surveyDate = new Date(event.target.patientSurveyCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      let surveyTitle = event.target.formGridSurveyTitle.value;\n      let surveyDescription = event.target.formGridSurveyDescription.value;\n      let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n      let surveyAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/surveys\";\n      let file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: surveyAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const surveyAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientSurvey\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientSystematicInquiryHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      let selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Systematic Inquiry...\"\n      });\n      let systematicInquiryDate = null;\n\n      if (event.target.formGridSystematicInquiryDate) {\n        systematicInquiryDate = event.target.formGridSystematicInquiryDate.value;\n      }\n\n      if (event.target.formGridSystematicInquiryDateTodayCheckbox.checked === true) {\n        systematicInquiryDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientSystematicInquiryCalendarDate.value !== null && event.target.formGridSystematicInquiryDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientSystematicInquiryCalendarDate.value).toISOString().slice(0, 10));\n        systematicInquiryDate = new Date(event.target.patientSystematicInquiryCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      let systematicInquiryTitle = event.target.formGridSystematicInquiryTitle.value;\n      let systematicInquiryDescription = event.target.formGridSystematicInquiryDescription.value;\n      let systematicInquiryAttachmentFormat = event.target.formGridSystematicInquiryAttachmentFormat.value;\n      let systematicInquiryAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/systematicInquirys\";\n      let file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: systematicInquiryAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const systematicInquiryAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      }); // ReactS3Client\n      //     .uploadFile(file, newFileName)\n      //     .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      //     .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n      const requestBody = {\n        query: `\n      mutation {updatePatientSystematicInquiry(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{systematicInquiryDate:\"${systematicInquiryDate}\",systematicInquiryTitle:\"${systematicInquiryTitle}\",systematicInquiryDescription:\"${systematicInquiryDescription}\",systematicInquiryAttachmentName:\"${systematicInquiryAttachmentName}\",systematicInquiryAttachmentFormat:\"${systematicInquiryAttachmentFormat}\",systematicInquiryAttachmentPath:\"${systematicInquiryAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientSystematicInquiry._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientSystematicInquiry);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientSystematicInquiry\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientVitalsHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Vitals...\"\n      });\n      let vitalsDate = null;\n\n      if (event.target.formGridVitalsDate) {\n        vitalsDate = event.target.formGridVitalsDate.value;\n      }\n\n      if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n        vitalsDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientVitalsCalendarDate.value !== null && event.target.formGridVitalsDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientVitalsCalendarDate.value).toISOString().slice(0, 10));\n        vitalsDate = new Date(event.target.patientVitalsCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const vitalsPr = event.target.formGridVitalsPr.value;\n      const vitalsBp1 = event.target.formGridVitalsBp1.value;\n      const vitalsBp2 = event.target.formGridVitalsBp2.value;\n      const vitalsRr = event.target.formGridVitalsRr.value;\n      const vitalsTemp = event.target.formGridVitalsTemp.value;\n      const vitalsPs02 = event.target.formGridVitalsPs02.value;\n      const vitalsHeight = event.target.formGridVitalsHeight.value;\n      const vitalsWeight = event.target.formGridVitalsWeight.value;\n      const vitalsBmi = event.target.formGridVitalsBmi.value;\n      const vitalsUrineType = event.target.formGridVitalsUrineType.value;\n      const vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n      const requestBody = {\n        query: `\n      mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientVitals\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientExaminationHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Examination...\"\n      });\n      let examinationDate = null;\n\n      if (event.target.formGridExaminationDate) {\n        examinationDate = event.target.formGridExaminationDate.value;\n      }\n\n      if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n        examinationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      if (event.target.patientExaminationCalendarDate.value !== null && event.target.formGridExaminationDateTodayCheckbox.checked !== true) {\n        console.log(\"fancyDate2\", new Date(event.target.patientExaminationCalendarDate.value).toISOString().slice(0, 10));\n        surveyDate = new Date(event.target.patientExaminationCalendarDate.value).toISOString().slice(0, 10);\n      }\n\n      const examinationGeneral = event.target.formGridExaminationGeneral.value;\n      let examinationArea = undefined;\n\n      if (event.target.formGridExaminationAreaSelect.value === \"select\") {\n        examinationArea = event.target.formGridExaminationArea.value;\n      } else {\n        examinationArea = event.target.formGridExaminationAreaSelect.value;\n      }\n\n      const examinationType = event.target.formGridExaminationType.value;\n      const examinationMeasure = event.target.formGridExaminationMeasure.value;\n      const examinationValue = event.target.formGridExaminationValue.value;\n      const examinationDescription = event.target.formGridExaminationDescription.value;\n      const examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n      const examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n      const examinationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/examinations\";\n      const file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: examinationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const examinationAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientExamination\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientHistoryHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient History...\"\n      });\n      const historyType = event.target.formGridHistoryType.value;\n      let historyDate = event.target.formGridHistoryDate.value;\n\n      if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n        historyDate = new Date().toISOString().slice(0, 10);\n      }\n\n      const historyTitle = event.target.formGridHistoryTitle.value;\n      const historyDescription = event.target.formGridHistoryDescription.value;\n      const historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n      const historyAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/history\";\n      const file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: historyAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const historyAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientHistory\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAllergiesHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Allergies...\"\n      });\n      const allergiesTitle = event.target.formGridAllergiesTitle.value;\n      let allergiesType = undefined;\n\n      if (event.target.formGridAllergiesTypeSelect === \"select\") {\n        allergiesType = event.target.formGridAllergiesType.value;\n      } else {\n        allergiesType = event.target.formGridAllergiesTypeSelect.value;\n      }\n\n      const allergiesDescription = event.target.formGridAllergiesDescription.value;\n      const allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n      const allergiesAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/allergies\";\n      const file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: allergiesAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const allergiesAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientAllergies\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientMedicationHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Medication...\"\n      });\n      const medicationTitle = event.target.formGridMedicationTitle.value;\n      const medicationType = event.target.formGridMedicationType.value;\n      const medicationDescription = event.target.formGridMedicationDescription.value;\n      const medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n      const medicationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/medication\";\n      const file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: medicationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const medicationAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const requestBody = {\n        query: `\n    mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientMedication\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientInvestigationHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Investigation...\"\n      });\n      let investigationDate = null;\n\n      if (event.target.formGridInvestigationDate) {\n        investigationDate = event.target.formGridInvestigationDate.value;\n      }\n\n      if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n        investigationDate = new Date().toISOString().slice(0, 10);\n      }\n\n      const investigationTitle = event.target.formGridInvestigationTitle.value;\n      let investigationType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        investigationType = event.target.formGridInvestigationType.value;\n      } else {\n        investigationType = event.target.formGridInvestigationTypeSelect.value;\n      }\n\n      const investigationDescription = event.target.formGridInvestigationDescription.value;\n      const investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n      const investigationAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/investigation\";\n      const file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: investigationAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const investigationAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientInvestigation\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientDiagnosisHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Diagnosis...\"\n      });\n      let diagnosisDate = null;\n\n      if (event.target.formGridDiagnosisDate) {\n        diagnosisDate = event.target.formGridDiagnosisDate.value;\n      }\n\n      if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n        diagnosisDate = new Date().toISOString().slice(0, 10);\n      }\n\n      const diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n      const diagnosisType = event.target.formGridDiagnosisType.value;\n      const diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n      const diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n      const diagnosisAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/diagnosis\";\n      const file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: diagnosisAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const diagnosisAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientDiagnosis\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTreatmentHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Treatment...\"\n      });\n      let treatmentDate = null;\n\n      if (event.target.formGridTreatmentDate) {\n        treatmentDate = event.target.formGridTreatmentDate.value;\n      }\n\n      if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n        treatmentDate = new Date().toISOString().slice(0, 10);\n      }\n\n      const treatmentTitle = event.target.formGridTreatmentTitle.value;\n      const treatmentDescription = event.target.formGridTreatmentDescription.value;\n      const treatmentDose = event.target.formGridTreatmentDose.value;\n      const treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n      let treatmentType = undefined;\n\n      if (event.target.formGridInvestigationTypeSelect === \"select\") {\n        treatmentType = event.target.formGridTreatmentType.value;\n      } else {\n        treatmentType = event.target.formGridTreatmentTypeSelect.value;\n      }\n\n      const treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n      const treatmentAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/treatment\";\n      const file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: treatmentAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const treatmentAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientTreatment\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientBillingHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Billing...\"\n      });\n      let billingDate = null;\n\n      if (event.target.formGridBillingDate) {\n        billingDate = event.target.formGridBillingDate.value;\n      }\n\n      if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n        billingDate = new Date().toISOString().slice(0, 10);\n      }\n\n      const billingTitle = event.target.formGridBillingTitle.value;\n      const billingType = event.target.formGridBillingType.value;\n      const billingDescription = event.target.formGridBillingDescription.value;\n      const billingAmount = event.target.formGridBillingAmount.value;\n      const billingPaid = event.target.formGridBillingPaid.value;\n      const billingNotes = event.target.formGridBillingNotes.value;\n      const billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n      const billingAttachmentPath = \"uploads/patients/\" + selectedPatientId + \"/billing\";\n      const file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: billingAttachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const billingAttachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n      const requestBody = {\n        query: `\n      mutation {updatePatientBilling(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{billingDate:\"${billingDate}\",billingTitle:\"${billingTitle}\",billingType:\"${billingType}\",billingDescription:\"${billingDescription}\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\"${billingNotes}\",billingAttachmentName:\"${billingAttachmentName}\",billingAttachmentFormat:\"${billingAttachmentFormat}\",billingAttachmentPath:\"${billingAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientBilling\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientVigilanceHandler = event => {\n      event.preventDefault();\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Vigilance...\"\n      });\n      let vigilanceDate = null;\n\n      if (event.target.formGridVigilanceDate) {\n        vigilanceDate = event.target.formGridVigilanceDate.value;\n      }\n\n      if (event.target.formGridVigilanceDateTodayCheckbox.checked === true) {\n        vigilanceDate = new Date().toISOString().slice(0, 10);\n      }\n\n      const vigilanceChronicIllnessDiabetesMedication = event.target.formGridVigilanceChronicIllnessDiabetesMedication.checked;\n      const vigilanceChronicIllnessDiabetesTesting = event.target.formGridVigilanceChronicIllnessDiabetesTesting.checked;\n      const vigilanceChronicIllnessDiabetesComment = event.target.formGridVigilanceChronicIllnessDiabetesComment.value;\n      const vigilanceChronicIllnessHbpMedication = event.target.formGridVigilanceChronicIllnessHbpMedication.checked;\n      const vigilanceChronicIllnessHbpTesting = event.target.formGridVigilanceChronicIllnessHbpTesting.checked;\n      const vigilanceChronicIllnessHbpComment = event.target.formGridVigilanceChronicIllnessHbpComment.value;\n      const vigilanceChronicIllnessDyslipidemiaMedication = event.target.formGridVigilanceChronicIllnessDyslipidemiaMedication.checked;\n      const vigilanceChronicIllnessDyslipidemiaTesting = event.target.formGridVigilanceChronicIllnessDyslipidemiaTesting.checked;\n      const vigilanceChronicIllnessDyslipidemiaComment = event.target.formGridVigilanceChronicIllnessDyslipidemiaComment.value;\n      const vigilanceChronicIllnessCadMedication = event.target.formGridVigilanceChronicIllnessCadMedication.checked;\n      const vigilanceChronicIllnessCadTesting = event.target.formGridVigilanceChronicIllnessCadTesting.checked;\n      const vigilanceChronicIllnessCadComment = event.target.formGridVigilanceChronicIllnessCadComment.value;\n      const vigilanceLifestyleWeightMedication = event.target.formGridVigilanceLifestyleWeightMedication.checked;\n      const vigilanceLifestyleWeightTesting = event.target.formGridVigilanceLifestyleWeightTesting.checked;\n      const vigilanceLifestyleWeightComment = event.target.formGridVigilanceLifestyleWeightComment.value;\n      const vigilanceLifestyleDietMedication = event.target.formGridVigilanceLifestyleDietMedication.checked;\n      const vigilanceLifestyleDietTesting = event.target.formGridVigilanceLifestyleDietTesting.checked;\n      const vigilanceLifestyleDietComment = event.target.formGridVigilanceLifestyleDietComment.value;\n      const vigilanceLifestyleSmokingMedication = event.target.formGridVigilanceLifestyleSmokingMedication.checked;\n      const vigilanceLifestyleSmokingTesting = event.target.formGridVigilanceLifestyleSmokingTesting.checked;\n      const vigilanceLifestyleSmokingComment = event.target.formGridVigilanceLifestyleSmokingComment.value;\n      const vigilanceLifestyleSubstanceAbuseMedication = event.target.formGridVigilanceLifestyleSubstanceAbuseMedication.checked;\n      const vigilanceLifestyleSubstanceAbuseTesting = event.target.formGridVigilanceLifestyleSubstanceAbuseTesting.checked;\n      const vigilanceLifestyleSubstanceAbuseComment = event.target.formGridVigilanceLifestyleSubstanceAbuseComment.value;\n      const vigilanceLifestyleExerciseMedication = event.target.formGridVigilanceLifestyleExerciseMedication.checked;\n      const vigilanceLifestyleExerciseTesting = event.target.formGridVigilanceLifestyleExerciseTesting.checked;\n      const vigilanceLifestyleExerciseComment = event.target.formGridVigilanceLifestyleExerciseComment.value;\n      const vigilanceLifestyleAllergiesMedication = event.target.formGridVigilanceLifestyleAllergiesMedication.checked;\n      const vigilanceLifestyleAllergiesTesting = event.target.formGridVigilanceLifestyleAllergiesTesting.checked;\n      const vigilanceLifestyleAllergiesComment = event.target.formGridVigilanceLifestyleAllergiesComment.value;\n      const vigilanceLifestyleAsthmaMedication = event.target.formGridVigilanceLifestyleAsthmaMedication.checked;\n      const vigilanceLifestyleAsthmaTesting = event.target.formGridVigilanceLifestyleAsthmaTesting.checked;\n      const vigilanceLifestyleAsthmaComment = event.target.formGridVigilanceLifestyleAsthmaComment.value;\n      const vigilanceScreeningBreastMedication = event.target.formGridVigilanceScreeningBreastMedication.checked;\n      const vigilanceScreeningBreastTesting = event.target.formGridVigilanceScreeningBreastTesting.checked;\n      const vigilanceScreeningBreastComment = event.target.formGridVigilanceScreeningBreastComment.value;\n      const vigilanceScreeningProstateMedication = event.target.formGridVigilanceScreeningProstateMedication.checked;\n      const vigilanceScreeningProstateTesting = event.target.formGridVigilanceScreeningProstateTesting.checked;\n      const vigilanceScreeningProstateComment = event.target.formGridVigilanceScreeningProstateComment.value;\n      const vigilanceScreeningCervixMedication = event.target.formGridVigilanceScreeningCervixMedication.checked;\n      const vigilanceScreeningCervixTesting = event.target.formGridVigilanceScreeningCervixTesting.checked;\n      const vigilanceScreeningCervixComment = event.target.formGridVigilanceScreeningCervixComment.value;\n      const vigilanceScreeningColonMedication = event.target.formGridVigilanceScreeningColonMedication.checked;\n      const vigilanceScreeningColonTesting = event.target.formGridVigilanceScreeningColonTesting.checked;\n      const vigilanceScreeningColonComment = event.target.formGridVigilanceScreeningColonComment.value;\n      const vigilanceScreeningDentalMedication = event.target.formGridVigilanceScreeningDentalMedication.checked;\n      const vigilanceScreeningDentalTesting = event.target.formGridVigilanceScreeningDentalTesting.checked;\n      const vigilanceScreeningDentalComment = event.target.formGridVigilanceScreeningDentalComment.value;\n      const vigilanceVaccinesInfluenzaMedication = event.target.formGridVigilanceVaccinesInfluenzaMedication.checked;\n      const vigilanceVaccinesInfluenzaTesting = event.target.formGridVigilanceVaccinesInfluenzaTesting.checked;\n      const vigilanceVaccinesInfluenzaComment = event.target.formGridVigilanceVaccinesInfluenzaComment.value;\n      const vigilanceVaccinesVaricellaMedication = event.target.formGridVigilanceVaccinesVaricellaMedication.checked;\n      const vigilanceVaccinesVaricellaTesting = event.target.formGridVigilanceVaccinesVaricellaTesting.checked;\n      const vigilanceVaccinesVaricellaComment = event.target.formGridVigilanceVaccinesVaricellaComment.value;\n      const vigilanceVaccinesHpvMedication = event.target.formGridVigilanceVaccinesHpvMedication.checked;\n      const vigilanceVaccinesHpvTesting = event.target.formGridVigilanceVaccinesHpvTesting.checked;\n      const vigilanceVaccinesHpvComment = event.target.formGridVigilanceVaccinesHpvComment.value;\n      const vigilanceVaccinesMmrMedication = event.target.formGridVigilanceVaccinesMmrMedication.checked;\n      const vigilanceVaccinesMmrTesting = event.target.formGridVigilanceVaccinesMmrTesting.checked;\n      const vigilanceVaccinesMmrComment = event.target.formGridVigilanceVaccinesMmrComment.value;\n      const vigilanceVaccinesTetanusMedication = event.target.formGridVigilanceVaccinesTetanusMedication.checked;\n      const vigilanceVaccinesTetanusTesting = event.target.formGridVigilanceVaccinesTetanusTesting.checked;\n      const vigilanceVaccinesTetanusComment = event.target.formGridVigilanceVaccinesTetanusComment.value;\n      const vigilanceVaccinesPneumovaxMedication = event.target.formGridVigilanceVaccinesPneumovaxMedication.checked;\n      const vigilanceVaccinesPneumovaxTesting = event.target.formGridVigilanceVaccinesPneumovaxTesting.checked;\n      const vigilanceVaccinesPneumovaxComment = event.target.formGridVigilanceVaccinesPneumovaxComment.value;\n      const vigilanceVaccinesOtherName = event.target.formGridVigilanceVaccinesOtherName.value;\n      const vigilanceVaccinesOtherMedication = event.target.formGridVigilanceVaccinesOtherMedication.checked;\n      const vigilanceVaccinesOtherTesting = event.target.formGridVigilanceVaccinesOtherTesting.checked;\n      const vigilanceVaccinesOtherComment = event.target.formGridVigilanceVaccinesOtherComment.value;\n      const requestBody = {\n        query: `\n      mutation {updatePatientVigilance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{\n        vigilanceDate:\"${vigilanceDate}\",\n        vigilanceChronicIllnessDiabetesMedication: ${vigilanceChronicIllnessDiabetesMedication},\n        vigilanceChronicIllnessDiabetesTesting: ${vigilanceChronicIllnessDiabetesTesting},\n        vigilanceChronicIllnessDiabetesComment: \"${vigilanceChronicIllnessDiabetesComment}\",\n        vigilanceChronicIllnessHbpMedication: ${vigilanceChronicIllnessHbpMedication},\n        vigilanceChronicIllnessHbpTesting: ${vigilanceChronicIllnessHbpTesting},\n        vigilanceChronicIllnessHbpComment: \"${vigilanceChronicIllnessHbpComment}\",\n        vigilanceChronicIllnessDyslipidemiaMedication: ${vigilanceChronicIllnessDyslipidemiaMedication},\n        vigilanceChronicIllnessDyslipidemiaTesting: ${vigilanceChronicIllnessDyslipidemiaTesting},\n        vigilanceChronicIllnessDyslipidemiaComment: \"${vigilanceChronicIllnessDyslipidemiaComment}\",\n        vigilanceChronicIllnessCadMedication: ${vigilanceChronicIllnessCadMedication},\n        vigilanceChronicIllnessCadTesting: ${vigilanceChronicIllnessCadTesting},\n        vigilanceChronicIllnessCadComment: \"${vigilanceChronicIllnessCadComment}\",\n        vigilanceLifestyleWeightMedication: ${vigilanceLifestyleWeightMedication},\n        vigilanceLifestyleWeightTesting: ${vigilanceLifestyleWeightTesting},\n        vigilanceLifestyleWeightComment: \"${vigilanceLifestyleWeightComment}\",\n        vigilanceLifestyleDietMedication: ${vigilanceLifestyleDietMedication},\n        vigilanceLifestyleDietTesting: ${vigilanceLifestyleDietTesting},\n        vigilanceLifestyleDietComment: \"${vigilanceLifestyleDietComment}\",\n        vigilanceLifestyleSmokingMedication: ${vigilanceLifestyleSmokingMedication},\n        vigilanceLifestyleSmokingTesting: ${vigilanceLifestyleSmokingTesting},\n        vigilanceLifestyleSmokingComment: \"${vigilanceLifestyleSmokingComment}\",\n        vigilanceLifestyleSubstanceAbuseMedication: ${vigilanceLifestyleSubstanceAbuseMedication},\n        vigilanceLifestyleSubstanceAbuseTesting: ${vigilanceLifestyleSubstanceAbuseTesting},\n        vigilanceLifestyleSubstanceAbuseComment: \"${vigilanceLifestyleSubstanceAbuseComment}\",\n        vigilanceLifestyleExerciseMedication: ${vigilanceLifestyleExerciseMedication},\n        vigilanceLifestyleExerciseTesting: ${vigilanceLifestyleExerciseTesting},\n        vigilanceLifestyleExerciseComment: \"${vigilanceLifestyleExerciseComment}\",\n        vigilanceLifestyleAllergiesMedication: ${vigilanceLifestyleAllergiesMedication},\n        vigilanceLifestyleAllergiesTesting: ${vigilanceLifestyleAllergiesTesting},\n        vigilanceLifestyleAllergiesComment: \"${vigilanceLifestyleAllergiesComment}\",\n        vigilanceLifestyleAsthmaMedication: ${vigilanceLifestyleAsthmaMedication},\n        vigilanceLifestyleAsthmaTesting: ${vigilanceLifestyleAsthmaTesting},\n        vigilanceLifestyleAsthmaComment: \"${vigilanceLifestyleAsthmaComment}\",\n        vigilanceScreeningBreastMedication: ${vigilanceScreeningBreastMedication},\n        vigilanceScreeningBreastTesting: ${vigilanceScreeningBreastTesting},\n        vigilanceScreeningBreastComment: \"${vigilanceScreeningBreastComment}\",\n        vigilanceScreeningProstateMedication: ${vigilanceScreeningProstateMedication},\n        vigilanceScreeningProstateTesting: ${vigilanceScreeningProstateTesting},\n        vigilanceScreeningProstateComment: \"${vigilanceScreeningProstateComment}\",\n        vigilanceScreeningCervixMedication: ${vigilanceScreeningCervixMedication},\n        vigilanceScreeningCervixTesting: ${vigilanceScreeningCervixTesting},\n        vigilanceScreeningCervixComment: \"${vigilanceScreeningCervixComment}\",\n        vigilanceScreeningColonMedication: ${vigilanceScreeningColonMedication},\n        vigilanceScreeningColonTesting: ${vigilanceScreeningColonTesting},\n        vigilanceScreeningColonComment: \"${vigilanceScreeningColonComment}\",\n        vigilanceScreeningDentalMedication: ${vigilanceScreeningDentalMedication},\n        vigilanceScreeningDentalTesting: ${vigilanceScreeningDentalTesting},\n        vigilanceScreeningDentalComment: \"${vigilanceScreeningDentalComment}\",\n        vigilanceVaccinesInfluenzaMedication: ${vigilanceVaccinesInfluenzaMedication},\n        vigilanceVaccinesInfluenzaTesting: ${vigilanceVaccinesInfluenzaTesting},\n        vigilanceVaccinesInfluenzaComment: \"${vigilanceVaccinesInfluenzaComment}\",\n        vigilanceVaccinesVaricellaMedication: ${vigilanceVaccinesVaricellaMedication},\n        vigilanceVaccinesVaricellaTesting: ${vigilanceVaccinesVaricellaTesting},\n        vigilanceVaccinesVaricellaComment: \"${vigilanceVaccinesVaricellaComment}\",\n        vigilanceVaccinesHpvMedication: ${vigilanceVaccinesHpvMedication},\n        vigilanceVaccinesHpvTesting: ${vigilanceVaccinesHpvTesting},\n        vigilanceVaccinesHpvComment: \"${vigilanceVaccinesHpvComment}\",\n        vigilanceVaccinesMmrMedication: ${vigilanceVaccinesMmrMedication},\n        vigilanceVaccinesMmrTesting: ${vigilanceVaccinesMmrTesting},\n        vigilanceVaccinesMmrComment: \"${vigilanceVaccinesMmrComment}\",\n        vigilanceVaccinesTetanusMedication: ${vigilanceVaccinesTetanusMedication},\n        vigilanceVaccinesTetanusTesting: ${vigilanceVaccinesTetanusTesting},\n        vigilanceVaccinesTetanusComment: \"${vigilanceVaccinesTetanusComment}\",\n        vigilanceVaccinesPneumovaxMedication: ${vigilanceVaccinesPneumovaxMedication},\n        vigilanceVaccinesPneumovaxTesting: ${vigilanceVaccinesPneumovaxTesting},\n        vigilanceVaccinesPneumovaxComment: \"${vigilanceVaccinesPneumovaxComment}\",\n        vigilanceVaccinesOtherName: \"${vigilanceVaccinesOtherName}\",\n        vigilanceVaccinesOtherMedication: ${vigilanceVaccinesOtherMedication},\n        vigilanceVaccinesOtherTesting: ${vigilanceVaccinesOtherTesting},\n        vigilanceVaccinesOtherComment: \"${vigilanceVaccinesOtherComment}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientVigilance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientVigilance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientVigilance\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientAttachmentHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Attachment...\"\n      });\n      const attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n      const attachmentPath = \"uploads/patients/\" + selectedPatientId + \"/attachments\";\n      const file = AuthContext._currentValue.file;\n      const config = {\n        bucketName: this.context.creds.s3.bucketName,\n        dirName: attachmentPath,\n        region: this.context.creds.s3.region,\n        accessKeyId: this.context.creds.s3.accessKeyId,\n        secretAccessKey: this.context.creds.s3.secretAccessKey\n      };\n      const ReactS3Client = new S3(config);\n      const newFileName = file.name;\n      const attachmentName = newFileName;\n      this.setState({\n        userAlert: \"uploading attachment ...\"\n      });\n      ReactS3Client.uploadFile(file, newFileName).then(data => {\n        console.log(data);\n        this.setState({\n          userAlert: \"attachment upload success!\"\n        });\n      }).catch(err => {\n        console.error(err);\n        this.setState({\n          userAlert: \"upload error:  \" + err\n        });\n      });\n\n      if (attachmentName.trim().length === 0 || attachmentFormat.trim().length === 0 || attachmentPath.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n            mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n            {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n          `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientAttachment\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientNoteHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Note ...\"\n      });\n      const note = event.target.formGridNote.value;\n\n      if (note.trim().length === 0) {\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientNotes._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientNotes);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientNotes\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.updatePatientTagHandler = event => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const selectedPatientId = this.context.selectedPatient._id;\n      this.setState({\n        updating: false,\n        patientUpdateField: null,\n        userAlert: \"Adding selected Patient Tag...\"\n      });\n      const tag = event.target.formGridTag.value;\n\n      if (tag.trim().length === 0) {\n        console.log(\"Can't Submit a blank form!!!...Please try again...\");\n        this.setState({\n          userAlert: \"Can't Submit a blank form!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n          mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const updatedPatientId = resData.data.updatePatientTags._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientTags);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.fetchPatients();\n        this.setState({\n          userAlert: responseAlert,\n          selectedPatient: resData.data.updatePatientTags\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchHandler = event => {\n      const userId = this.context.userId;\n      const token = this.context.token;\n      this.setState({\n        searching: false,\n        userAlert: \"Now Searching Patients...\"\n      });\n      let field = null;\n      const query = event.target.formBasicQuery.value;\n\n      if (event.target.formBasicFieldSelect.value === \"select\") {\n        field = event.target.formBasicField.value;\n      } else {\n        field = event.target.formBasicFieldSelect.value;\n      }\n\n      this.setState({\n        patientSearchField: field,\n        patientSearchQuery: query\n      });\n\n      if (field.trim().length === 0 || query.trim().length === 0) {\n        this.setState({\n          userAlert: \"blank fields detected!!!...Please try again...\"\n        });\n        return;\n      }\n\n      const requestBody = {\n        query: `\n      query {\n        getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 15);\n        const searchPatients = resData.data.getPatientField;\n        this.setState({\n          searchPatients: searchPatients,\n          userAlert: responseAlert\n        }); // this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchIdHandler = event => {\n      const userId = this.context.userId;\n      this.setState({\n        searching: false,\n        userAlert: \"Searching Patients by Id...\"\n      });\n      const patientId = event.target.formBasicId.value;\n      const requestBody = {\n        query: `\n      query {getPatientId(userId:\"${userId}\",patientId:\"${patientId}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      const token = this.context.token;\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        const searchPatients = resData.data.getPatientId;\n        this.setState({\n          searchPatients: [searchPatients],\n          userAlert: responseAlert\n        });\n        console.log(\"state.searchPatients:  \", this.state.searchPatients); // this.fetchUsers();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.modalConfirmSearchNameHandler = event => {\n      this.setState({\n        searching: false,\n        userAlert: \"Searching Patients by Name...\"\n      });\n      const patients = this.state.patients;\n      const regex = new RegExp(event.target.formBasicName.value, \"i\");\n      let result = patients.filter(patient => patient.name.match(regex));\n      this.setState({\n        searchPatients: result\n      });\n    };\n\n    this.getPatientVisit = event => {\n      const selectedPatient = this.state.selectedPatient;\n      event.preventDefault();\n      let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n      let visitSurveys = selectedPatient.surveys.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitConsultants = selectedPatient.consultant.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitComplaints = selectedPatient.complaints.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate); // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n\n      let visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitVitals = selectedPatient.vitals.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitExaminations = selectedPatient.examination.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitHistory = selectedPatient.history.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitInvestigations = selectedPatient.investigation.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitDiagnosis = selectedPatient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitTreatments = selectedPatient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitBilling = selectedPatient.billing.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      let visitVigilance = selectedPatient.vigilance.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        systematicInquiry: visitSystematicInquiry,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n        vigilance: visitVigilance\n      };\n      this.setState({\n        visit: visit\n      });\n    };\n\n    this.getVisitList = () => {\n      const selectedPatient = this.state.selectedPatient;\n      const patientName = this.state.selectedPatient.name;\n      let selectedPatientAppointmentDateArray = [];\n      let selectedPatientAppointmentVisitArray = [];\n      let selectedPatientAppointments = this.state.selectedPatient.appointments.map(appointments => {\n        selectedPatientAppointmentDateArray.push(new Date(appointments.date.substr(0, 10) * 1000).toISOString().substring(0, 10));\n      });\n      selectedPatientAppointmentDateArray.map(appointmentDate => {\n        thisGetVisit(appointmentDate, patientName);\n      });\n\n      function thisGetVisit(argsDate, argsPatientName) {\n        const visitDate = argsDate;\n        const visitSurveys = selectedPatient.surveys.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitConsultants = selectedPatient.consultant.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitComplaints = selectedPatient.complaints.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate); // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n\n        const visitVitals = selectedPatient.vitals.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitExaminations = selectedPatient.examination.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitHistory = selectedPatient.history.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitInvestigations = selectedPatient.investigation.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitDiagnosis = selectedPatient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitTreatments = selectedPatient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitBilling = selectedPatient.billing.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visitVigilance = selectedPatient.vigilance.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n        const visit = {\n          date: visitDate,\n          patientName: argsPatientName,\n          consultant: visitConsultants,\n          complaint: visitComplaints,\n          examination: visitExaminations,\n          survey: visitSurveys,\n          systematicInquiry: visitSystematicInquiry,\n          vitals: visitVitals,\n          history: visitHistory,\n          investigation: visitInvestigations,\n          diagnosis: visitDiagnosis,\n          treatment: visitTreatments,\n          billing: visitBilling,\n          vigilance: visitVigilance\n        };\n        selectedPatientAppointmentVisitArray.push(visit);\n      }\n\n      this.setState({\n        visitList: selectedPatientAppointmentVisitArray\n      });\n    };\n\n    this.getVisitListAsc = () => {\n      let list = this.state.visitList;\n      list.sort((a, b) => {\n        if (a.date < b.date) return -1;\n        return a.date > b.date ? 1 : 0;\n      });\n      this.setState({\n        visitList: list\n      });\n    };\n\n    this.getVisitListDesc = () => {\n      let list = this.state.visitList;\n      list.sort((a, b) => {\n        if (a.date < b.date) return 1;\n        return a.date > b.date ? -1 : 0;\n      });\n      this.setState({\n        visitList: list\n      });\n    };\n\n    this.modalCancelHandler = () => {\n      this.setState({\n        creating: false,\n        updating: false,\n        searching: false,\n        selectedPatient: null\n      });\n    };\n\n    this.fetchPatientsAsc = () => {\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const patients = resData.data.patientsNameAsc;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients;\n        this.setState({\n          patients: patients\n        }); // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.fetchPatientsDesc = () => {\n      const userId = this.context.userId;\n      const token = this.context.token; // this.setState({ isLoading: true });\n\n      const requestBody = {\n        query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const patients = resData.data.patientsNameDesc;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.context.patients = patients; // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n\n        this.setState({\n          patients: patients\n        });\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        }); // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n    };\n\n    this.modalDeleteHandler = () => {\n      const selectedPatientId = this.context.selectedPatient._id;\n      const userId = this.context.selectedUser._id;\n\n      if (this.context.user.role !== 'admin') {\n        this.setState({\n          userAlert: \"Not the Admin! No edit permission!!\"\n        });\n      }\n\n      this.setState({\n        deleting: true,\n        userAlert: \"Deleting selected Patient...\"\n      });\n      const requestBody = {\n        query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + this.context.token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatient;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        let deletedPatientId = deletedPatient._id;\n        deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n        const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n        const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n        this.setState({\n          deleting: false\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n\n        if (this.isActive) {\n          this.setState({\n            deleting: false\n          });\n        }\n      });\n    };\n\n    this.deletePatientInsuranceItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n       mutation {deletePatientInsurance (userId:\"${userId}\", patientId:\"${patientId}\",insuranceCompany:\"${props.company}\",insuranceNumber:\"${props.number}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientInsurance;\n        const updatedPatientId = resData.data.deletePatientInsurance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientInsurance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientAppointmentItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n         mutation {deletePatientAppointment (userId:\"${userId}\", patientId:\"${patientId}\",appointmentId:\"${props._id}\",appointmentDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAppointment;\n        const updatedPatientId = resData.data.deletePatientAppointment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientAppointment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientConsultantItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\"${userId}\", patientId:\"${patientId}\",consultantId:\"${props.reference.id}\",consultantDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientConsultant;\n        const updatedPatientId = resData.data.deletePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientNextOfKinItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n       mutation {deletePatientNextOfKin (userId:\"${userId}\", patientId:\"${patientId}\",nextOfKinName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNextOfKin;\n        const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientComplaintItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientComplaint (userId:\"${userId}\", patientId:\"${patientId}\",complaintTitle:\"${props.title}\",complaintDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientComplaint;\n        const updatedPatientId = resData.data.deletePatientComplaint._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientComplaint);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientSurveyItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientSurvey (userId:\"${userId}\", patientId:\"${patientId}\",surveyTitle:\"${props.title}\",surveyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientSurvey;\n        const updatedPatientId = resData.data.deletePatientSurvey._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientSurvey);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientSystematicInquiryItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientSystematicInquiry (userId:\"${userId}\", patientId:\"${patientId}\",systematicInquiryTitle:\"${props.title}\",systematicInquiryDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientSystematicInquiry;\n        const updatedPatientId = resData.data.deletePatientSystematicInquiry._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientSystematicInquiry);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientVitalsItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientVitals (userId:\"${userId}\", patientId:\"${patientId}\",vitalsDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientVitals;\n        const updatedPatientId = resData.data.deletePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientExaminationItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientExamination (userId:\"${userId}\", patientId:\"${patientId}\",examinationType:\"${props.type}\",examinationDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientExamination;\n        const updatedPatientId = resData.data.deletePatientExamination._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientExamination);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientHistoryItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientHistory (userId:\"${userId}\", patientId:\"${patientId}\",historyTitle:\"${props.title}\",historyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientHistory;\n        const updatedPatientId = resData.data.deletePatientHistory._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientHistory);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientAllergiesItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n       mutation {deletePatientAllergies (userId:\"${userId}\", patientId:\"${patientId}\",allergiesTitle:\"${props.title}\",allergiesType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientAllergies;\n        const updatedPatientId = resData.data.deletePatientAllergies._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientAllergies);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientMedicationItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n       mutation {deletePatientMedication (userId:\"${userId}\", patientId:\"${patientId}\",medicationTitle:\"${props.title}\",medicationType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientMedication;\n        const updatedPatientId = resData.data.deletePatientMedication._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientMedication);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientInvestigationItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n         mutation {deletePatientInvestigation (userId:\"${userId}\", patientId:\"${patientId}\",investigationDate:\"${date}\",investigationTitle:\"${props.title}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientInvestigation;\n        const updatedPatientId = resData.data.deletePatientInvestigation._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientInvestigation);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientDiagnosisItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientDiagnosis (userId:\"${userId}\",patientId:\"${patientId}\",diagnosisDate:\"${date}\",diagnosisTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n       `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientDiagnosis;\n        const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientDiagnosis);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientTreatmentItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n     mutation {deletePatientTreatment (userId:\"${userId}\", patientId:\"${patientId}\",treatmentDate:\"${date}\",treatmentTitle:\"${props.title}\")\n     {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientTreatment;\n        const updatedPatientId = resData.data.deletePatientTreatment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientTreatment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientBillingItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientBilling (userId:\"${userId}\", patientId:\"${patientId}\",billingDate:\"${date}\",billingTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientBilling;\n        const updatedPatientId = resData.data.deletePatientBilling._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientBilling);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientVigilanceItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const date = new Date(props.date.substr(0, 10) * 1000).toISOString().slice(0, 10);\n      const requestBody = {\n        query: `\n       mutation {deletePatientVigilance (userId:\"${userId}\", patientId:\"${patientId}\",vigilanceDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n     `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientVigilance;\n        const updatedPatientId = resData.data.deletePatientVigilance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientVigilance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientAttachmentItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id; //   const config = {\n      //     bucketName: this.context.creds.s3.bucketName,\n      //     dirName: props.path,\n      //     region: this.context.creds.s3.region,\n      //     accessKeyId: this.context.creds.s3.accessKeyId,\n      //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n      //   }\n      // const ReactS3Client = new S3(config);\n      // const filename = props.name;\n      // // const attachmentName = newFileName;\n      // //\n      // S3FileUpload\n      // .deleteFile(filename, config)\n      // .then(response => console.log(response))\n      // .catch(err => console.error(err))\n\n      const requestBody = {\n        query: `\n       mutation {deletePatientAttachment (userId:\"${userId}\", patientId:\"${patientId}\",attachmentName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        const deletedPatient = resData.data.deletePatientAttachment;\n        const updatedPatientId = resData.data.deletePatientAttachment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientAttachment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientNoteItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n    mutation {deletePatientNote (userId:\"${userId}\", patientId:\"${patientId}\",note:\"${props}\")\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientNote;\n        const updatedPatientId = resData.data.deletePatientNote._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientNote);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.deletePatientTagItem = props => {\n      const token = this.context.token;\n      const userId = this.context.userId;\n      const patientId = this.state.selectedPatient._id;\n      const requestBody = {\n        query: `\n    mutation {deletePatientTag (userId:\"${userId}\", patientId:\"${patientId}\",tag:\"${props}\")\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `\n      };\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        let deletedPatient = resData.data.deletePatientTag;\n        const updatedPatientId = resData.data.deletePatientTag._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientTag);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n        this.setState({\n          userAlert: responseAlert\n        });\n        this.fetchPatients();\n      }).catch(err => {\n        this.setState({\n          userAlert: err\n        });\n      });\n    };\n\n    this.onViewAttachment = attachment => {\n      this.setState({\n        showAttachment: true\n      });\n      const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\" + attachment.path + \"/\" + attachment.name;\n      const type = attachment.format;\n      this.setState({\n        showThisAttachmentFile: file,\n        showThisAttachmentType: type\n      });\n    };\n\n    this.closeAttachmentView = () => {\n      this.setState({\n        showAttachment: false\n      });\n    };\n\n    this.createPdf = (patient, args) => {\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        }\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfType: \"test\",\n        pdfData: pdfData\n      });\n    };\n\n    this.createPdfTest = event => {\n      event.preventDefault();\n      console.log(`\n      create pdf user otf input here...\n      ${event.target.formGridDocGenUserInput.value}\n      ${event.target.formGridDocGenVisitDate.value}\n    `);\n      const patient = this.state.selectedPatient;\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        test: event.target.formGridDocGenUserInput.value,\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        }\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfType: \"test\",\n        pdfData: pdfData\n      });\n    };\n\n    this.createReferral = patient => {\n      const pdfData = {\n        title: \"Patient Referral\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        referral: \"test referral...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"patientReferral\"\n      });\n    };\n\n    this.createReferralInput = event => {\n      event.preventDefault();\n      const visitDate = new Date(event.target.formGridDocGenReferralVisitDate.value).toISOString().substring(0, 10);\n      const patient = this.state.selectedPatient;\n      const visitDiagnosis = patient.diagnosis.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      const visitTreatment = patient.treatment.filter(x => new Date(x.date.substr(0, 10) * 1000).toISOString().substring(0, 10) === visitDate);\n      console.log(`\n        create referral user otf input here...\n        ${event.target.formGridDocGenReferralVisitDate.value},\n        ${event.target.formGridDocGenReferralRecommendation.value},\n        ${event.target.formGridDocGenReferralFindings.value},\n        visitDiagnosis: ${JSON.stringify(visitDiagnosis)},\n      `);\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        visitDate: visitDate,\n        findings: event.target.formGridDocGenReferralFindings.value,\n        recommendation: event.target.formGridDocGenReferralRecommendation.value,\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        referral: \"test referral... now w/ input\",\n        visitDiagnosis: visitDiagnosis,\n        visitTreatment: visitTreatment,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"patientReferral\"\n      });\n    };\n\n    this.createOperationReminder = patient => {\n      const pdfData = {\n        title: \"Operation Reminder\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        referral: \"test reminder...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"operationReminder\"\n      });\n    };\n\n    this.createOperationReminderInput = event => {\n      event.preventDefault();\n      const patient = this.state.selectedPatient;\n      console.log(`\n        create operation reminder user otf input here...\n      `);\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.address.number,\n            street: patient.address.street,\n            town: patient.address.town,\n            parish: patient.address.parish,\n            postOffice: patient.address.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        date: event.target.formGridDocGenOperationReminderDate.value,\n        name: event.target.formGridDocGenOperationReminderName.value,\n        time: event.target.formGridDocGenOperationReminderTime.value,\n        hospitalName: event.target.formGridDocGenOperationReminderHospitalName.value,\n        hospitalAddress: event.target.formGridDocGenOperationReminderHopsitalAddress.value,\n        fastDate: event.target.formGridDocGenOperationReminderFastDate.value,\n        fastTime: event.target.formGridDocGenOperationReminderFastTime.value,\n        estimateCost: event.target.formGridDocGenOperationReminderEstimateCost.value,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"operationReminder\"\n      });\n    };\n\n    this.createMiscNote = patient => {\n      const pdfData = {\n        title: \"Misc Note\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        referral: \"test note...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"miscNote\"\n      });\n    };\n\n    this.createMiscNoteInput = event => {\n      event.preventDefault();\n      const patient = this.state.selectedPatient;\n      console.log(`\n        create misc note user otf input here...\n      `);\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.address.number,\n            street: patient.address.street,\n            town: patient.address.town,\n            parish: patient.address.parish,\n            postOffice: patient.address.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        note1: event.target.formGridDocGenMiscNote1.value,\n        note2: event.target.formGridDocGenMiscNote2.value,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"miscNote\"\n      });\n    };\n\n    this.createSickNote = patient => {\n      const pdfData = {\n        title: \"Sick Note\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        referral: \"test sick note...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"sickNote\"\n      });\n    };\n\n    this.createSickNoteInput = event => {\n      event.preventDefault();\n      const patient = this.state.selectedPatient;\n      console.log(`\n        create Sick note user otf input here...\n      `);\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.address.number,\n            street: patient.address.street,\n            town: patient.address.town,\n            parish: patient.address.parish,\n            postOffice: patient.address.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        date: new Date(),\n        duration: event.target.formGridDocGenSickNoteDuration.value,\n        startDate: event.target.formGridDocGenSickNoteStartDate.value,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"sickNote\"\n      });\n    };\n\n    this.createInsuranceNote = patient => {\n      const pdfData = {\n        title: \"Insurance Note\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        referral: \"test insurance note...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"insuranceNote\"\n      });\n    };\n\n    this.createInsuranceNoteInput = event => {\n      event.preventDefault();\n      const patient = this.state.selectedPatient;\n      console.log(`\n        create Insurance note user otf input here...\n      `);\n      const pdfData = {\n        title: \"This pdf is supplied with Patient data...\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.address.number,\n            street: patient.address.street,\n            town: patient.address.town,\n            parish: patient.address.parish,\n            postOffice: patient.address.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          },\n          occupation: {\n            role: patient.occupation.role,\n            employer: patient.occupation.employer,\n            contact: {\n              phone: patient.occupation.contact.phone,\n              email: patient.occupation.contact.email\n            }\n          },\n          appointments: patient.appointments,\n          consultant: patient.consultant,\n          insurance: patient.insurance,\n          nextOfKin: patient.nextOfKin,\n          complaints: patient.complaints,\n          surveys: patient.surveys,\n          systematicInquiry: patient.systematicInquiry,\n          vitals: patient.vitals,\n          examination: patient.examination,\n          history: patient.history,\n          allergies: patient.allergies,\n          medication: patient.medication,\n          investigation: patient.investigation,\n          diagnosis: patient.diagnosis,\n          treatment: patient.treatment,\n          billing: patient.billing,\n          vigilance: patient.vigilance,\n          attachments: patient.attachments,\n          notes: patient.notes,\n          tags: patient.tags\n        },\n        operation: event.target.formGridDocGenInsuranceNoteOperation.value,\n        operationDate: event.target.formGridDocGenInsuranceNoteOperationDate.value,\n        surgeonFee: event.target.formGridDocGenInsuranceNoteSurgeonFee.value,\n        assistantSurgeonFee: event.target.formGridDocGenInsuranceNoteAssistantSurgeonFee.value,\n        anesthetistsFee: event.target.formGridDocGenInsuranceNoteAnesthetistFee.value,\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"insuranceNote\"\n      });\n    };\n\n    this.createPrescription = patient => {\n      const pdfData = {\n        title: \"Prescription\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        referral: \"test prescription...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"prescription\"\n      });\n    };\n\n    this.createProcedureConsent = patient => {\n      const pdfData = {\n        title: \"Procedure Consent\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        referral: \"test procedure consent...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"procedureConsent\"\n      });\n    };\n\n    this.createFitToFly = patient => {\n      const pdfData = {\n        title: \"Fit-to-Fly Authorization\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        referral: \"test fit-to-fly authorization...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"fitToFlyAuthorization\"\n      });\n    };\n\n    this.createTreatmentInstruction = patient => {\n      const pdfData = {\n        title: \"Treatment Instruction\",\n        patient: {\n          _id: patient._id,\n          title: patient.title,\n          name: patient.name,\n          dob: patient.dob,\n          age: patient.age,\n          gender: patient.gender,\n          address: {\n            number: patient.number,\n            street: patient.street,\n            town: patient.town,\n            parish: patient.parish,\n            postOffice: patient.postOffice\n          },\n          registrationDate: patient.registrationDate,\n          referralDate: patient.referralDate,\n          expirationDate: patient.expirationDate,\n          attendingPhysician: {\n            name: patient.attendingPhysician.name,\n            email: patient.attendingPhysician.email,\n            phone: patient.attendingPhysician.phone\n          },\n          referringDoctor: {\n            name: patient.referringDoctor.name,\n            email: patient.referringDoctor.email,\n            phone: patient.referringDoctor.phone\n          },\n          contact: {\n            phone: patient.contact.phone,\n            email: patient.contact.email\n          }\n        },\n        referral: \"test Treatment Instruction...\",\n        letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n      };\n      this.setState({\n        creatingDocument: true,\n        pdfData: pdfData,\n        pdfType: \"treatmentInstruction\"\n      });\n    };\n\n    this.closePdfCreator = () => {\n      this.setState({\n        creatingDocument: false,\n        pdfData: null,\n        pdfType: null\n      });\n    };\n\n    this.showDetailHandler = patientId => {\n      this.setState({\n        visitList: []\n      });\n      this.setState(prevState => {\n        const selectedPatient = prevState.patients.find(e => e._id === patientId);\n        this.context.selectedPatient = selectedPatient;\n        this.context.selectedPatientId = selectedPatient._id;\n        return {\n          selectedPatient: selectedPatient\n        };\n      });\n    };\n\n    this.selectVisit = props => {\n      this.setState({\n        selectedVisit: props\n      });\n    };\n\n    this.closeVisit = () => {\n      this.setState({\n        visit: null,\n        selectedVisit: null\n      });\n    };\n\n    this.createVisitChecklistUpdate = props => {\n      this.setState({\n        userAlert: `creating visit: ${props} addedd...`\n      });\n      let newState = Object.assign({}, this.state);\n      newState.createVisitChecklist[props] = true;\n      this.setState(newState);\n    };\n\n    this.newVisitComplete = () => {\n      this.setState({\n        userAlert: \"New Visit creation complete...\",\n        newVisit: false,\n        createVisitChecklist: {\n          consultant: true,\n          complaint: true,\n          diagnosis: true,\n          examination: true,\n          investigation: true,\n          survey: true,\n          systematicInquiry: true,\n          treatment: true,\n          vitals: true,\n          billing: true,\n          vigilance: true\n        }\n      });\n    };\n\n    this.showSidebar = () => {\n      console.log(`\n    showing sidebar...\n    `);\n      this.setState({\n        sidebarShow: true,\n        mCol2Size: 9\n      });\n    };\n\n    this.hideSidebar = () => {\n      console.log(`\n    hiding sidebar...\n    `);\n      this.setState({\n        sidebarShow: false,\n        mCol2Size: 11\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\") {\n      this.setState({\n        canDelete: true\n      });\n    }\n\n    if (JSON.stringify(this.context.selectedPatient) !== \"{}\") {\n      this.setState({\n        selectedPatient: this.context.selectedPatient\n      });\n    }\n\n    console.log(`this.context.selectedUser, ${JSON.stringify(this.context.selectedUser)}`);\n    this.fetchPatients();\n  }\n\n  fetchPatients() {\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({\n      isLoading: true,\n      userAlert: \"Fetching Patient Master List...\"\n    });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      const patients = resData.data.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2, 25);\n      this.setState({\n        userAlert: responseAlert\n      });\n      this.context.patients = this.state.patients;\n\n      if (this.isActive) {\n        this.setState({\n          patients: patients,\n          isLoading: false\n        });\n      }\n    }).catch(err => {\n      this.setState({\n        userAlert: err\n      });\n\n      if (this.isActive) {\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  updatePatientSpecial(event) {\n    const field = event.target.value;\n    this.setState({\n      patientUpdateField: field\n    });\n  }\n\n  componentWillUnmount() {\n    this.isActive = false;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4290\n      },\n      __self: this\n    }, this.state.showAttachment === true && React.createElement(AttachmentViewer, {\n      onCloseAttachmentView: this.closeAttachmentView,\n      attachmentFile: this.state.showThisAttachmentFile,\n      attachmentType: this.state.showThisAttachmentType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4292\n      },\n      __self: this\n    }), this.state.creatingDocument === true && React.createElement(PdfCreator, {\n      pdfType: this.state.pdfType,\n      pdfData: this.state.pdfData,\n      onClosePdfCreator: this.closePdfCreator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4299\n      },\n      __self: this\n    }), React.createElement(AlertBox, {\n      authUserId: this.context.userId,\n      alert: this.state.userAlert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4305\n      },\n      __self: this\n    }), React.createElement(SidebarControl, {\n      onShowSidebar: this.showSidebar,\n      onHideSidebar: this.hideSidebar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4309\n      },\n      __self: this\n    }), React.createElement(Accordion, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4314\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4315\n      },\n      __self: this\n    }, this.state.sidebarShow === true && React.createElement(Col, {\n      md: 3,\n      className: \"MasterCol1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4318\n      },\n      __self: this\n    }, React.createElement(SidebarPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4319\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: this.state.mCol2Size,\n      className: \"MasterCol2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4323\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerCombinedDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4324\n      },\n      __self: this\n    }, React.createElement(Tab.Container, {\n      id: \"left-tabs-example\",\n      defaultActiveKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4325\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4326\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 2,\n      className: \"vertMenu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4327\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4328\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4329\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4330\n      },\n      __self: this\n    }, \"MASTER LIST\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4332\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4333\n      },\n      __self: this\n    }, \"Search:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4335\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4336\n      },\n      __self: this\n    }, \"Input\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4338\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4339\n      },\n      __self: this\n    }, \"Results\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4341\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4342\n      },\n      __self: this\n    }, \"Selected\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4344\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4345\n      },\n      __self: this\n    }, \"Create New\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4347\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4348\n      },\n      __self: this\n    }, \"Edit:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4350\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4351\n      },\n      __self: this\n    }, \"Demographics\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4353\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4354\n      },\n      __self: this\n    }, \"Single Field\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4356\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"disabled\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4357\n      },\n      __self: this\n    }, \"Add:\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4359\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientAddVisit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4360\n      },\n      __self: this\n    }, \"Visit\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4362\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditConsultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4363\n      },\n      __self: this\n    }, \"Consultant\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4365\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditInsurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4366\n      },\n      __self: this\n    }, \"Insurance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4368\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditNextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4369\n      },\n      __self: this\n    }, \"Next of Kin\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4371\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditComplaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4372\n      },\n      __self: this\n    }, \"History\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4374\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditSurvey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4375\n      },\n      __self: this\n    }, \"Survey\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4377\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditSystematicInquiry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4378\n      },\n      __self: this\n    }, \"Systematic Inquiry\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4380\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditVitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4381\n      },\n      __self: this\n    }, \"Vitals\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4383\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditExamination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4384\n      },\n      __self: this\n    }, \"Examination\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4386\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4387\n      },\n      __self: this\n    }, \"Past History\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4389\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditAllergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4390\n      },\n      __self: this\n    }, \"Allergies\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4392\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditMedication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4393\n      },\n      __self: this\n    }, \"Medication\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4395\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditInvestigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4396\n      },\n      __self: this\n    }, \"Investigation\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4398\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditDiagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4399\n      },\n      __self: this\n    }, \"Diagnosis\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4401\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditTreatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4402\n      },\n      __self: this\n    }, \"Treatment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4404\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditBilling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4405\n      },\n      __self: this\n    }, \"Billing\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4407\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditVigilance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4408\n      },\n      __self: this\n    }, \"Vigilance\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4410\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4411\n      },\n      __self: this\n    }, \"Attachment\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4413\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4414\n      },\n      __self: this\n    }, \"Note\")), React.createElement(Nav.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4416\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"patientEditTag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4417\n      },\n      __self: this\n    }, \"Tag\")))), React.createElement(Col, {\n      md: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4423\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4424\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"patientDetail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4425\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4427\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-danger\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4432\n      },\n      __self: this\n    }, \"Don't forget to select someone from the Staff page before editing Patient Consultant information !!!\"), this.state.isLoading === false && this.state.selectedPatient !== null && React.createElement(PatientDetail, {\n      authUserId: this.context.userId,\n      token: this.context.token,\n      patient: this.state.selectedPatient,\n      users: this.context.users,\n      onEdit: this.startUpdatePatientHandler,\n      canDelete: this.state.canDelete,\n      onDelete: this.modalDeleteHandler,\n      onGetVisit: this.getPatientVisit,\n      visit: this.state.visit,\n      selectedVisit: this.state.selectedVisit,\n      fetchUsers: this.fetchUsers,\n      appointmentDelete: this.deletePatientAppointmentItem,\n      consultantDelete: this.deletePatientConsultantItem,\n      insuranceDelete: this.deletePatientInsuranceItem,\n      nextOfKinDelete: this.deletePatientNextOfKinItem,\n      complaintDelete: this.deletePatientComplaintItem,\n      surveyDelete: this.deletePatientSurveyItem,\n      systematicInquiryDelete: this.deletePatientSystematicInquiryItem,\n      vitalsDelete: this.deletePatientVitalsItem,\n      examinationDelete: this.deletePatientExaminationItem,\n      historyDelete: this.deletePatientHistoryItem,\n      allergiesDelete: this.deletePatientAllergiesItem,\n      medicationDelete: this.deletePatientMedicationItem,\n      investigationDelete: this.deletePatientInvestigationItem,\n      diagnosisDelete: this.deletePatientDiagnosisItem,\n      treatmentDelete: this.deletePatientTreatmentItem,\n      billingDelete: this.deletePatientBillingItem,\n      vigilanceDelete: this.deletePatientVigilanceItem,\n      attachmentDelete: this.deletePatientAttachmentItem,\n      noteDelete: this.deletePatientNoteItem,\n      tagDelete: this.deletePatientTagItem,\n      onViewAttachment: this.onViewAttachment,\n      onCreatePdf: this.createPdf,\n      onCreatePdfTest: this.createPdfTest,\n      onCreateReferral: this.createReferral,\n      onCreateReferralInput: this.createReferralInput,\n      onCreateOperationReminder: this.createOperationReminder,\n      onCreateOperationReminderInput: this.createOperationReminderInput,\n      onCreateMiscNote: this.createMiscNote,\n      onCreateMiscNoteInput: this.createMiscNoteInput,\n      onCreateSickNote: this.createSickNote,\n      onCreateSickNoteInput: this.createSickNoteInput,\n      onCreateInsuranceNote: this.createInsuranceNote,\n      onCreateInsuranceNoteInput: this.createInsuranceNoteInput,\n      onCreatePrescription: this.createPrescription,\n      onCreateProcedureConsent: this.createProcedureConsent,\n      onCreateFitToFly: this.createFitToFly,\n      onCreateTreatmentInstruction: this.createTreatmentInstruction,\n      onGetVisitList: this.getVisitList,\n      visitList: this.state.visitList,\n      onSelectVisit: this.selectVisit,\n      onCloseVisit: this.closeVisit,\n      onSortVisitListAsc: this.getVisitListAsc,\n      onSortVisitListDesc: this.getVisitListDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4438\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientCreate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4497\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4498\n      },\n      __self: this\n    }, \"Create NEW Patient Profile\"), this.state.creating && React.createElement(CreatePatientForm, {\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmHandler,\n      confirmText: \"Confirm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4500\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientAddVisit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4510\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4512\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && this.state.newVisit !== true && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startCreateVisitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4518\n      },\n      __self: this\n    }, \"Add NEW Visit\"), this.state.selectedPatient !== null && this.state.newVisit === true && React.createElement(Accordion, {\n      defaultActiveKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4522\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4523\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4524\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4525\n      },\n      __self: this\n    }, \"Guide:\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4529\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4530\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4531\n      },\n      __self: this\n    }, \"To create a NEW Patient Visit, fill in the forms below.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4534\n      },\n      __self: this\n    }, \"Everytime you submit a form with new info, a new item is added to the current Patient visit.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4537\n      },\n      __self: this\n    }, \"When you are done with a section click the GREEN Done adding Complaints, Vitals etc and continue to the next form.\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4540\n      },\n      __self: this\n    }, \"Once you have submitted all the information required scroll to the bottom and click the green button.\")))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4546\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4547\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4548\n      },\n      __self: this\n    }, \"Consultant\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4552\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4553\n      },\n      __self: this\n    }, \"Add Consultant form:\", this.state.createVisitChecklist.consultant === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4556\n      },\n      __self: this\n    }, \"Consultant for this Visit has already been added!!\"), this.state.createVisitChecklist.consultant === false && JSON.stringify(this.context.selectedUser) === \"{}\" && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4562\n      },\n      __self: this\n    }, \"Select someone from the Staff page\"), this.state.createVisitChecklist.consultant === false && this.context.selectedUser !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4568\n      },\n      __self: this\n    }, React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4569\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name, \"  ...\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4570\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\")), this.state.createVisitChecklist.consultant === false && this.context.selectedUser !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4575\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4589\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4590\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4591\n      },\n      __self: this\n    }, \"Complaint\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4595\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4596\n      },\n      __self: this\n    }, \"Add Complaint form:\", this.state.createVisitChecklist.complaint === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4599\n      },\n      __self: this\n    }, \"Complaint for this Visit has already been added!!\"), this.state.createVisitChecklist.complaint === false && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4604\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4618\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4619\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4620\n      },\n      __self: this\n    }, \"Vitals\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4624\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4625\n      },\n      __self: this\n    }, \"Add Vitals form:\", this.state.createVisitChecklist.vitals === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4628\n      },\n      __self: this\n    }, \"Vitals for this Visit have already been added!!\"), this.state.createVisitChecklist.vitals === false && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4633\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4647\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4648\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4649\n      },\n      __self: this\n    }, \"Examination\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4653\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4654\n      },\n      __self: this\n    }, \"Add Examination form:\", this.state.createVisitChecklist.examination === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4657\n      },\n      __self: this\n    }, \"Examination for this Visit has already been added!!\"), this.state.createVisitChecklist.examination === false && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4662\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4676\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4677\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4678\n      },\n      __self: this\n    }, \"Survey\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4682\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4683\n      },\n      __self: this\n    }, \"Add Survey form:\", this.state.createVisitChecklist.survey === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4686\n      },\n      __self: this\n    }, \"Survey for this Visit has already been added!!\"), this.state.createVisitChecklist.survey === false && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4691\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4705\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4706\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"22\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4707\n      },\n      __self: this\n    }, \"SystematicInquiry\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"22\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4711\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4712\n      },\n      __self: this\n    }, \"Add Systematic Inquiry form:\", this.state.createVisitChecklist.systematicInquiry === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4715\n      },\n      __self: this\n    }, \"Systematic Inquiry for this Visit has already been added!!\"), this.state.createVisitChecklist.systematicInquiry === false && React.createElement(UpdatePatientSystematicInquiryForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSystematicInquiryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4720\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4734\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4735\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4736\n      },\n      __self: this\n    }, \"Investigation\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4740\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4741\n      },\n      __self: this\n    }, \"Add Investigation form:\", this.state.createVisitChecklist.investigation === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4744\n      },\n      __self: this\n    }, \"Investigation for this Visit has already been added!!\"), this.state.createVisitChecklist.investigation === false && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4749\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4763\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4764\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4765\n      },\n      __self: this\n    }, \"Diagnosis\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"7\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4769\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4770\n      },\n      __self: this\n    }, \"Add Diagnosis form:\", this.state.createVisitChecklist.diagnosis === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4773\n      },\n      __self: this\n    }, \"Diagnosis for this Visit has already been added!!\"), this.state.createVisitChecklist.diagnosis === false && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4778\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4792\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4793\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4794\n      },\n      __self: this\n    }, \"Treatment\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4798\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4799\n      },\n      __self: this\n    }, \"Add Treatment form:\", this.state.createVisitChecklist.treatment === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4802\n      },\n      __self: this\n    }, \"Treatment for this Visit has already been added!!\"), this.state.createVisitChecklist.treatment === false && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4807\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4822\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4823\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4824\n      },\n      __self: this\n    }, \"Billing\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4828\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4829\n      },\n      __self: this\n    }, \"Add Billing form:\", this.state.createVisitChecklist.billing === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4832\n      },\n      __self: this\n    }, \"Billing for this Visit has already been added!!\"), this.state.createVisitChecklist.billing === false && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4837\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4851\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4852\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"23\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4853\n      },\n      __self: this\n    }, \"Vigilance\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"23\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4857\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4858\n      },\n      __self: this\n    }, \"Add Vigilance form:\", this.state.createVisitChecklist.vigilance === true && React.createElement(Button, {\n      variant: \"warning\",\n      size: \"lg\",\n      className: \"formButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4861\n      },\n      __self: this\n    }, \"Vigilance for this Visit has already been added!!\"), this.state.createVisitChecklist.vigilance === false && React.createElement(UpdatePatientVigilanceForm, {\n      authUserId: this.context.userId,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVigilanceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      visit: true,\n      onCreateVisitChecklistUpdate: this.createVisitChecklistUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4866\n      },\n      __self: this\n    })))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4880\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4881\n      },\n      __self: this\n    }, React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4882\n      },\n      __self: this\n    }, \"Finished ?\")), React.createElement(Accordion.Collapse, {\n      eventKey: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4886\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4887\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"success\",\n      className: \"formButton\",\n      onClick: this.newVisitComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4888\n      },\n      __self: this\n    }, \"Done creating Visit\")))))), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditDemographics\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4898\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4900\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4905\n      },\n      __self: this\n    }, \"Edit Demographics\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4909\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4921\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4923\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.startUpdatePatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4928\n      },\n      __self: this\n    }, \"Edit a Single Field\"), this.state.updating && this.state.selectedPatient !== null && React.createElement(UpdatePatientFieldForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmUpdateFieldHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4932\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditConsultant\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4944\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4946\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"consultant\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4951\n      },\n      __self: this\n    }, \"Add a Consultant\"), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && this.context.selectedUser === null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4956\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4957\n      },\n      __self: this\n    }, \"Select someone from the Staff page\")), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4964\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4965\n      },\n      __self: this\n    }, \"Add Consultant: \", this.context.selectedUser.name, \"  ...\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4966\n      },\n      __self: this\n    }, \" To Paitient: \", this.state.selectedPatient.name, \" ??\")), this.state.patientUpdateField === 'consultant' && this.state.selectedPatient !== null && React.createElement(UpdatePatientConsultantForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientConsultantHandler,\n      confirmText: \"Confirm\",\n      consultant: this.context.selectedUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4971\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditInsurance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4983\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4985\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"insurance\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4990\n      },\n      __self: this\n    }, \"Add Insurance\"), this.state.patientUpdateField === 'insurance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInsuranceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInsuranceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4994\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditNextOfKin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5006\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5008\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"nextOfKin\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5013\n      },\n      __self: this\n    }, \"Add NextOfKin\"), this.state.patientUpdateField === 'nextOfKin' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNextOfKinForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNextOfKinHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5018\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditComplaint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5030\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5032\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"complaint\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5037\n      },\n      __self: this\n    }, \"Add History\"), this.state.patientUpdateField === 'complaint' && this.state.selectedPatient !== null && React.createElement(UpdatePatientComplaintForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientComplaintHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5041\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditSurvey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5053\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5055\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"survey\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5060\n      },\n      __self: this\n    }, \"Add Survey\"), this.state.patientUpdateField === 'survey' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSurveyForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSurveyHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5064\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditSystematicInquiry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5076\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5078\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"systematicInquiry\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5083\n      },\n      __self: this\n    }, \"Add Systematic Inquiry\"), this.state.patientUpdateField === 'systematicInquiry' && this.state.selectedPatient !== null && React.createElement(UpdatePatientSystematicInquiryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientSystematicInquiryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5088\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditVitals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5100\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5102\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vitals\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5107\n      },\n      __self: this\n    }, \"Add Vitals\"), this.state.patientUpdateField === 'vitals' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVitalsForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVitalsHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5111\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditExamination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5123\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5125\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"examintion\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5130\n      },\n      __self: this\n    }, \"Add Examination\"), this.state.patientUpdateField === 'examintion' && this.state.selectedPatient !== null && React.createElement(UpdatePatientExaminationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientExaminationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5134\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditHistory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5146\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5148\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"history\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5153\n      },\n      __self: this\n    }, \"Add Past History\"), this.state.patientUpdateField === 'history' && this.state.selectedPatient !== null && React.createElement(UpdatePatientHistoryForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientHistoryHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5158\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditAllergies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5170\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5172\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"allergies\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5177\n      },\n      __self: this\n    }, \"Add Allergies\"), this.state.patientUpdateField === 'allergies' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAllergiesForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAllergiesHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5182\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditMedication\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5194\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5196\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"medication\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5201\n      },\n      __self: this\n    }, \"Add Medication\"), this.state.patientUpdateField === 'medication' && this.state.selectedPatient !== null && React.createElement(UpdatePatientMedicationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientMedicationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5206\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditInvestigation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5218\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5220\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"investigation\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5225\n      },\n      __self: this\n    }, \"Add Investigation\"), this.state.patientUpdateField === 'investigation' && this.state.selectedPatient !== null && React.createElement(UpdatePatientInvestigationForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientInvestigationHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5230\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditDiagnosis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5242\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5244\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"diagnosis\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5249\n      },\n      __self: this\n    }, \"Add Diagnosis\"), this.state.patientUpdateField === 'diagnosis' && this.state.selectedPatient !== null && React.createElement(UpdatePatientDiagnosisForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientDiagnosisHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5254\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditTreatment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5266\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5268\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"treatment\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5273\n      },\n      __self: this\n    }, \"Add Treatment\"), this.state.patientUpdateField === 'treatment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTreatmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTreatmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5278\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditBilling\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5290\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5292\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"billing\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5297\n      },\n      __self: this\n    }, \"Add Billing\"), this.state.patientUpdateField === 'billing' && this.state.selectedPatient !== null && React.createElement(UpdatePatientBillingForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientBillingHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5302\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditVigilance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5314\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5316\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"vigilance\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5321\n      },\n      __self: this\n    }, \"Add Vigilance\"), this.state.patientUpdateField === 'vigilance' && this.state.selectedPatient !== null && React.createElement(UpdatePatientVigilanceForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientVigilanceHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5326\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditAttachment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5338\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5340\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"attachment\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5345\n      },\n      __self: this\n    }, \"Add Attachment\"), this.state.patientUpdateField === 'attachment' && this.state.selectedPatient !== null && React.createElement(UpdatePatientAttachmentForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientAttachmentHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5350\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditNote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5362\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5364\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"notes\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5369\n      },\n      __self: this\n    }, \"Add Note\"), this.state.patientUpdateField === 'notes' && this.state.selectedPatient !== null && React.createElement(UpdatePatientNoteForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientNoteHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5374\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"patientEditTag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5386\n      },\n      __self: this\n    }, this.state.selectedPatient === null && React.createElement(Button, {\n      variant: \"outline-warning\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5388\n      },\n      __self: this\n    }, \"Select a Patient from the Master List\"), this.state.selectedPatient !== null && React.createElement(Button, {\n      variant: \"outline-primary\",\n      value: \"tags\",\n      size: \"lg\",\n      className: \"confirmEditButton\",\n      onClick: this.updatePatientSpecial.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5393\n      },\n      __self: this\n    }, \"Add Tag\"), this.state.patientUpdateField === 'tags' && this.state.selectedPatient !== null && React.createElement(UpdatePatientTagForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.updatePatientTagHandler,\n      confirmText: \"Confirm\",\n      patient: this.state.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5398\n      },\n      __self: this\n    })), React.createElement(Tab.Pane, {\n      eventKey: \"MasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5410\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerUserMasterList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5411\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5412\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      size: \"sm\",\n      onClick: this.fetchPatientsAsc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5413\n      },\n      __self: this\n    }, \"Sort Asc\"), React.createElement(Button, {\n      variant: \"info\",\n      size: \"sm\",\n      onClick: this.fetchPatientsDesc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5416\n      },\n      __self: this\n    }, \"Sort Desc\"), this.state.isLoading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5420\n      },\n      __self: this\n    }) : React.createElement(PatientList, {\n      patients: this.state.patients,\n      authUserId: this.context.userId,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5422\n      },\n      __self: this\n    })))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5432\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5433\n      },\n      __self: this\n    }, this.context.token && React.createElement(Row, {\n      className: \"searchUserRowAdd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5435\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.startSearchPatientHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5436\n      },\n      __self: this\n    }, \"Search\")), React.createElement(Row, {\n      className: \"searchUserRowForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5440\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 10,\n      className: \"searchUserColForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5441\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultActiveKey: \"Field\",\n      id: \"uncontrolled-tab-example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5442\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      eventKey: \"Search\",\n      title: \"Search:\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5443\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      eventKey: \"Field\",\n      title: \"Search by Field:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5445\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5447\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5452\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Id\",\n      title: \"Search by ID:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5463\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5465\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientIdForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchIdHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5470\n      },\n      __self: this\n    })), React.createElement(Tab, {\n      eventKey: \"Name\",\n      title: \"Search by Name:\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5482\n      },\n      __self: this\n    }, this.state.searching !== true && React.createElement(Button, {\n      variant: \"outline-warning\",\n      className: \"confirmEditButton\",\n      size: \"lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5484\n      },\n      __self: this\n    }, \"Click the 'Search' Button start\"), this.state.searching === true && React.createElement(SearchPatientNameForm, {\n      authUserId: this.context.userId,\n      canCancel: true,\n      canConfirm: true,\n      onCancel: this.modalCancelHandler,\n      onConfirm: this.modalConfirmSearchNameHandler,\n      confirmText: \"Search\",\n      patient: this.context.selectedPatient,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5489\n      },\n      __self: this\n    }))))))), React.createElement(Tab.Pane, {\n      eventKey: \"SearchResult\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5506\n      },\n      __self: this\n    }, React.createElement(Container, {\n      className: \"containerSearchUserResults\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5507\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5508\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"searchCard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5509\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"searchCardBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5510\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5511\n      },\n      __self: this\n    }, \"Your Search\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5512\n      },\n      __self: this\n    }, \"Field: \", this.state.patientSearchField), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5515\n      },\n      __self: this\n    }, \"Query: \", this.state.patientSearchQuery)))), React.createElement(Row, {\n      className: \"searchListRow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5521\n      },\n      __self: this\n    }, this.state.searchPatients !== [] && React.createElement(SearchPatientList, {\n      searchPatients: this.state.searchPatients,\n      authUserId: this.context.userId,\n      onCancel: this.modalCancelHandler,\n      onViewDetail: this.showDetailHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5524\n      },\n      __self: this\n    })))))))))))));\n  }\n\n}\n\nPatientsPage.contextType = AuthContext;\nexport default PatientsPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/office_records/ENT_EMR/frontend/src/pages/Patients.js"],"names":["React","Component","S3","Container","Row","Col","Button","Accordion","Tabs","Tab","Nav","Card","PatientList","PatientDetail","Spinner","AuthContext","SearchPatientList","SearchPatientForm","SearchPatientIdForm","SearchPatientNameForm","AlertBox","AttachmentViewer","PdfCreator","LoadingOverlay","SidebarPage","SidebarControl","CreatePatientForm","UpdatePatientForm","UpdatePatientFieldForm","UpdatePatientConsultantForm","UpdatePatientInsuranceForm","UpdatePatientNextOfKinForm","UpdatePatientComplaintForm","UpdatePatientSurveyForm","UpdatePatientSystematicInquiryForm","UpdatePatientVitalsForm","UpdatePatientExaminationForm","UpdatePatientHistoryForm","UpdatePatientAllergiesForm","UpdatePatientMedicationForm","UpdatePatientInvestigationForm","UpdatePatientDiagnosisForm","UpdatePatientTreatmentForm","UpdatePatientBillingForm","UpdatePatientVigilanceForm","UpdatePatientAttachmentForm","UpdatePatientNoteForm","UpdatePatientTagForm","PatientsPage","state","creating","updating","searching","updatingArray","deleting","patients","searchPatients","isLoading","selectedPatient","selectedUser","patientUpdateField","patientSearchField","patientSearchQuery","canDelete","visit","visitList","selectedVisit","newVisit","createVisitChecklist","consultant","complaint","diagnosis","examination","investigation","survey","systematicInquiry","treatment","vitals","billing","vigilance","userAlert","overlay","overlayStatus","showAttachment","showThisAttachmentFile","showThisAttachmentType","creatingDocument","createPdf","pdfData","pdfType","sidebarShow","mCol1Size","mCol2Size","isActive","startCreatePatientHandler","setState","startCreateVisitHandler","startUpdatePatientHandler","startSearchPatientHandler","modalConfirmHandler","event","userId","context","token","title","target","formGridTitle","value","name","formGridName","dob","formGridDob","age","formGridAge","gender","formGridGender","addressNumber","formGridAddressNumber","addressStreet","formGridAddressStreet","addressTown","formGridAddressTown","addressParish","formGridAddressParish","addressPostOffice","formGridAddressPostOffice","contactPhone","formGridContactPhone","contactEmail","formGridContactEmail","registrationDate","formGridRegistrationDate","formGridRegistrationDateTodayCheckbox","checked","Date","toISOString","slice","patientCalendarRegistrationDate","console","log","referralDate","formGridReferralDate","formGridReferralDateTodayCheckbox","patientCalendarReferralDate","expirationDate","formGridExpirationDate","attendingPhysicianName","formGridAttendingPhysicianName","attendingPhysicianEmail","formGridAttendingPhysicianEmail","attendingPhysicianPhone","formGridAttendingPhysicianPhone","referringDoctorName","formGridReferringDoctorName","referringDoctorEmail","formGridReferringDoctorEmail","referringDoctorPhone","formGridReferringDoctorPhone","occupationRole","formGridOccupationRole","occupationEmployer","formGridOccupationEmployer","occupationEmployerContactPhone","formGridOccupationEmployerContactPhone","occupationEmployerContactEmail","formGridOccupationEmployerContactEmail","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","Error","json","resData","responseAlert","data","newPatient","createPatient","prevState","updatedPatients","push","selecteAppointment","catch","err","modalCancelHandler","modalConfirmUpdateHandler","selectedPatientId","_id","formGridExpirationDateTodayCheckbox","patientCalendarExpirationDate","address","number","street","town","parish","postOffice","contact","phone","email","attendingPhysician","referringDoctor","occupation","role","employer","updatedPatientId","updatePatient","updatedPatient","find","e","updatedPatientPos","indexOf","slicedArray","splice","fetchPatients","modalConfirmUpdateFieldHandler","field","formGridQuery","formGridFieldSelect","formGridField","updatePatientField","updatePatientConsultantHandler","preventDefault","patientConsultantReference","undefined","consultantDate","formGridConsultantDate","formGridConsultantDateTodayCheckbox","patientConsultantCalendarDate","updatePatientConsultant","updatePatientInsuranceHandler","insuranceCompany","formGridInsuranceCompany","insuranceNumber","formGridInsuranceNumber","insuranceExpiry","patientCalendarInsuranceExpiryDate","insuranceDescription","formGridInsuranceDescription","insuranceSubscriberCompany","formGridInsuranceSubscriberCompany","insuranceSubscriberDescription","formGridInsuranceSubscriberDescription","updatePatientInsurance","updatePatientNextOfKinHandler","nextOfKinName","formGridNextOfKinName","nextOfKinPhone","formGridNextOfKinPhone","nextOfKinEmail","formGridNextOfKinEmail","updatePatientNextOfKin","updatePatientComplaintHandler","complaintTitle","formGridComplaintTitle","complaintDate","formGridComplaintDate","formGridComplaintDateTodayCheckbox","patientComplaintCalendarDate","complaintDescription","formGridComplaintDescription","complaintAnamnesis","formGridComplaintAnamnesis","complaintAttachmentFormat","formGridComplaintAttachmentFormat","complaintAttachmentPath","file","_currentValue","config","bucketName","creds","s3","dirName","region","accessKeyId","secretAccessKey","ReactS3Client","newFileName","complaintAttachmentName","uploadFile","error","updatePatientComplaint","updatePatientSurveyHandler","surveyDate","formGridSurveyDate","formGridSurveyDateTodayCheckbox","patientSurveyCalendarDate","surveyTitle","formGridSurveyTitle","surveyDescription","formGridSurveyDescription","surveyAttachmentFormat","formGridSurveyAttachmentFormat","surveyAttachmentPath","surveyAttachmentName","updatePatientSurvey","updatePatientSystematicInquiryHandler","systematicInquiryDate","formGridSystematicInquiryDate","formGridSystematicInquiryDateTodayCheckbox","patientSystematicInquiryCalendarDate","systematicInquiryTitle","formGridSystematicInquiryTitle","systematicInquiryDescription","formGridSystematicInquiryDescription","systematicInquiryAttachmentFormat","formGridSystematicInquiryAttachmentFormat","systematicInquiryAttachmentPath","systematicInquiryAttachmentName","updatePatientSystematicInquiry","updatePatientVitalsHandler","vitalsDate","formGridVitalsDate","formGridVitalsDateTodayCheckbox","patientVitalsCalendarDate","vitalsPr","formGridVitalsPr","vitalsBp1","formGridVitalsBp1","vitalsBp2","formGridVitalsBp2","vitalsRr","formGridVitalsRr","vitalsTemp","formGridVitalsTemp","vitalsPs02","formGridVitalsPs02","vitalsHeight","formGridVitalsHeight","vitalsWeight","formGridVitalsWeight","vitalsBmi","formGridVitalsBmi","vitalsUrineType","formGridVitalsUrineType","vitalsUrineValue","formGridVitalsUrineValue","updatePatientVitals","updatePatientExaminationHandler","examinationDate","formGridExaminationDate","formGridExaminationDateTodayCheckbox","patientExaminationCalendarDate","examinationGeneral","formGridExaminationGeneral","examinationArea","formGridExaminationAreaSelect","formGridExaminationArea","examinationType","formGridExaminationType","examinationMeasure","formGridExaminationMeasure","examinationValue","formGridExaminationValue","examinationDescription","formGridExaminationDescription","examinationFollowUp","formGridExaminationFollowUp","examinationAttachmentFormat","formGridExaminationAttachmentFormat","examinationAttachmentPath","examinationAttachmentName","updatePatientExamination","updatePatientHistoryHandler","historyType","formGridHistoryType","historyDate","formGridHistoryDate","formGridHistoryDateTodayCheckbox","historyTitle","formGridHistoryTitle","historyDescription","formGridHistoryDescription","historyAttachmentFormat","formGridHistoryAttachmentFormat","historyAttachmentPath","historyAttachmentName","updatePatientHistory","updatePatientAllergiesHandler","allergiesTitle","formGridAllergiesTitle","allergiesType","formGridAllergiesTypeSelect","formGridAllergiesType","allergiesDescription","formGridAllergiesDescription","allergiesAttachmentFormat","formGridAllergiesAttachmentFormat","allergiesAttachmentPath","allergiesAttachmentName","updatePatientAllergies","updatePatientMedicationHandler","medicationTitle","formGridMedicationTitle","medicationType","formGridMedicationType","medicationDescription","formGridMedicationDescription","medicationAttachmentFormat","formGridMedicationAttachmentFormat","medicationAttachmentPath","medicationAttachmentName","updatePatientMedication","updatePatientInvestigationHandler","investigationDate","formGridInvestigationDate","formGridInvestigationDateTodayCheckbox","investigationTitle","formGridInvestigationTitle","investigationType","formGridInvestigationTypeSelect","formGridInvestigationType","investigationDescription","formGridInvestigationDescription","investigationAttachmentFormat","formGridInvestigationAttachmentFormat","investigationAttachmentPath","investigationAttachmentName","updatePatientInvestigation","updatePatientDiagnosisHandler","diagnosisDate","formGridDiagnosisDate","formGridDiagnosisDateTodayCheckbox","diagnosisTitle","formGridDiagnosisTitle","diagnosisType","formGridDiagnosisType","diagnosisDescription","formGridDiagnosisDescription","diagnosisAttachmentFormat","formGridDiagnosisAttachmentFormat","diagnosisAttachmentPath","diagnosisAttachmentName","updatePatientDiagnosis","updatePatientTreatmentHandler","treatmentDate","formGridTreatmentDate","formGridTreatmentDateTodayCheckbox","treatmentTitle","formGridTreatmentTitle","treatmentDescription","formGridTreatmentDescription","treatmentDose","formGridTreatmentDose","treatmentFrequency","formGridTreatmentFrequency","treatmentType","formGridTreatmentType","formGridTreatmentTypeSelect","treatmentAttachmentFormat","formGridTreatmentAttachmentFormat","treatmentAttachmentPath","treatmentAttachmentName","updatePatientTreatment","updatePatientBillingHandler","billingDate","formGridBillingDate","formGridBillingDateTodayCheckbox","billingTitle","formGridBillingTitle","billingType","formGridBillingType","billingDescription","formGridBillingDescription","billingAmount","formGridBillingAmount","billingPaid","formGridBillingPaid","billingNotes","formGridBillingNotes","billingAttachmentFormat","formGridBillingAttachmentFormat","billingAttachmentPath","billingAttachmentName","updatePatientBilling","updatePatientVigilanceHandler","vigilanceDate","formGridVigilanceDate","formGridVigilanceDateTodayCheckbox","vigilanceChronicIllnessDiabetesMedication","formGridVigilanceChronicIllnessDiabetesMedication","vigilanceChronicIllnessDiabetesTesting","formGridVigilanceChronicIllnessDiabetesTesting","vigilanceChronicIllnessDiabetesComment","formGridVigilanceChronicIllnessDiabetesComment","vigilanceChronicIllnessHbpMedication","formGridVigilanceChronicIllnessHbpMedication","vigilanceChronicIllnessHbpTesting","formGridVigilanceChronicIllnessHbpTesting","vigilanceChronicIllnessHbpComment","formGridVigilanceChronicIllnessHbpComment","vigilanceChronicIllnessDyslipidemiaMedication","formGridVigilanceChronicIllnessDyslipidemiaMedication","vigilanceChronicIllnessDyslipidemiaTesting","formGridVigilanceChronicIllnessDyslipidemiaTesting","vigilanceChronicIllnessDyslipidemiaComment","formGridVigilanceChronicIllnessDyslipidemiaComment","vigilanceChronicIllnessCadMedication","formGridVigilanceChronicIllnessCadMedication","vigilanceChronicIllnessCadTesting","formGridVigilanceChronicIllnessCadTesting","vigilanceChronicIllnessCadComment","formGridVigilanceChronicIllnessCadComment","vigilanceLifestyleWeightMedication","formGridVigilanceLifestyleWeightMedication","vigilanceLifestyleWeightTesting","formGridVigilanceLifestyleWeightTesting","vigilanceLifestyleWeightComment","formGridVigilanceLifestyleWeightComment","vigilanceLifestyleDietMedication","formGridVigilanceLifestyleDietMedication","vigilanceLifestyleDietTesting","formGridVigilanceLifestyleDietTesting","vigilanceLifestyleDietComment","formGridVigilanceLifestyleDietComment","vigilanceLifestyleSmokingMedication","formGridVigilanceLifestyleSmokingMedication","vigilanceLifestyleSmokingTesting","formGridVigilanceLifestyleSmokingTesting","vigilanceLifestyleSmokingComment","formGridVigilanceLifestyleSmokingComment","vigilanceLifestyleSubstanceAbuseMedication","formGridVigilanceLifestyleSubstanceAbuseMedication","vigilanceLifestyleSubstanceAbuseTesting","formGridVigilanceLifestyleSubstanceAbuseTesting","vigilanceLifestyleSubstanceAbuseComment","formGridVigilanceLifestyleSubstanceAbuseComment","vigilanceLifestyleExerciseMedication","formGridVigilanceLifestyleExerciseMedication","vigilanceLifestyleExerciseTesting","formGridVigilanceLifestyleExerciseTesting","vigilanceLifestyleExerciseComment","formGridVigilanceLifestyleExerciseComment","vigilanceLifestyleAllergiesMedication","formGridVigilanceLifestyleAllergiesMedication","vigilanceLifestyleAllergiesTesting","formGridVigilanceLifestyleAllergiesTesting","vigilanceLifestyleAllergiesComment","formGridVigilanceLifestyleAllergiesComment","vigilanceLifestyleAsthmaMedication","formGridVigilanceLifestyleAsthmaMedication","vigilanceLifestyleAsthmaTesting","formGridVigilanceLifestyleAsthmaTesting","vigilanceLifestyleAsthmaComment","formGridVigilanceLifestyleAsthmaComment","vigilanceScreeningBreastMedication","formGridVigilanceScreeningBreastMedication","vigilanceScreeningBreastTesting","formGridVigilanceScreeningBreastTesting","vigilanceScreeningBreastComment","formGridVigilanceScreeningBreastComment","vigilanceScreeningProstateMedication","formGridVigilanceScreeningProstateMedication","vigilanceScreeningProstateTesting","formGridVigilanceScreeningProstateTesting","vigilanceScreeningProstateComment","formGridVigilanceScreeningProstateComment","vigilanceScreeningCervixMedication","formGridVigilanceScreeningCervixMedication","vigilanceScreeningCervixTesting","formGridVigilanceScreeningCervixTesting","vigilanceScreeningCervixComment","formGridVigilanceScreeningCervixComment","vigilanceScreeningColonMedication","formGridVigilanceScreeningColonMedication","vigilanceScreeningColonTesting","formGridVigilanceScreeningColonTesting","vigilanceScreeningColonComment","formGridVigilanceScreeningColonComment","vigilanceScreeningDentalMedication","formGridVigilanceScreeningDentalMedication","vigilanceScreeningDentalTesting","formGridVigilanceScreeningDentalTesting","vigilanceScreeningDentalComment","formGridVigilanceScreeningDentalComment","vigilanceVaccinesInfluenzaMedication","formGridVigilanceVaccinesInfluenzaMedication","vigilanceVaccinesInfluenzaTesting","formGridVigilanceVaccinesInfluenzaTesting","vigilanceVaccinesInfluenzaComment","formGridVigilanceVaccinesInfluenzaComment","vigilanceVaccinesVaricellaMedication","formGridVigilanceVaccinesVaricellaMedication","vigilanceVaccinesVaricellaTesting","formGridVigilanceVaccinesVaricellaTesting","vigilanceVaccinesVaricellaComment","formGridVigilanceVaccinesVaricellaComment","vigilanceVaccinesHpvMedication","formGridVigilanceVaccinesHpvMedication","vigilanceVaccinesHpvTesting","formGridVigilanceVaccinesHpvTesting","vigilanceVaccinesHpvComment","formGridVigilanceVaccinesHpvComment","vigilanceVaccinesMmrMedication","formGridVigilanceVaccinesMmrMedication","vigilanceVaccinesMmrTesting","formGridVigilanceVaccinesMmrTesting","vigilanceVaccinesMmrComment","formGridVigilanceVaccinesMmrComment","vigilanceVaccinesTetanusMedication","formGridVigilanceVaccinesTetanusMedication","vigilanceVaccinesTetanusTesting","formGridVigilanceVaccinesTetanusTesting","vigilanceVaccinesTetanusComment","formGridVigilanceVaccinesTetanusComment","vigilanceVaccinesPneumovaxMedication","formGridVigilanceVaccinesPneumovaxMedication","vigilanceVaccinesPneumovaxTesting","formGridVigilanceVaccinesPneumovaxTesting","vigilanceVaccinesPneumovaxComment","formGridVigilanceVaccinesPneumovaxComment","vigilanceVaccinesOtherName","formGridVigilanceVaccinesOtherName","vigilanceVaccinesOtherMedication","formGridVigilanceVaccinesOtherMedication","vigilanceVaccinesOtherTesting","formGridVigilanceVaccinesOtherTesting","vigilanceVaccinesOtherComment","formGridVigilanceVaccinesOtherComment","updatePatientVigilance","updatePatientAttachmentHandler","attachmentFormat","formGridPatientAttachmentFormat","attachmentPath","attachmentName","updatePatientAttachment","updatePatientNoteHandler","note","formGridNote","updatePatientNotes","updatePatientTagHandler","tag","formGridTag","updatePatientTags","modalConfirmSearchHandler","formBasicQuery","formBasicFieldSelect","formBasicField","getPatientField","modalConfirmSearchIdHandler","patientId","formBasicId","getPatientId","modalConfirmSearchNameHandler","regex","RegExp","formBasicName","result","filter","patient","match","getPatientVisit","visitDate","formBasicVisitDate","substring","visitSurveys","surveys","x","date","substr","visitConsultants","visitComplaints","complaints","visitSystematicInquiry","visitVitals","visitExaminations","visitHistory","history","visitInvestigations","visitDiagnosis","visitTreatments","visitBilling","visitVigilance","patientName","getVisitList","selectedPatientAppointmentDateArray","selectedPatientAppointmentVisitArray","selectedPatientAppointments","appointments","map","appointmentDate","thisGetVisit","argsDate","argsPatientName","getVisitListAsc","list","sort","a","b","getVisitListDesc","fetchPatientsAsc","patientsNameAsc","fetchPatientsDesc","patientsNameDesc","modalDeleteHandler","user","deletedPatient","deletePatient","deletedPatientId","deletedPatientPos","deletePatientInsuranceItem","props","company","deletePatientInsurance","deletePatientAppointmentItem","deletePatientAppointment","deletePatientConsultantItem","reference","id","deletePatientConsultant","deletePatientNextOfKinItem","deletePatientNextOfKin","deletePatientComplaintItem","deletePatientComplaint","deletePatientSurveyItem","deletePatientSurvey","deletePatientSystematicInquiryItem","deletePatientSystematicInquiry","deletePatientVitalsItem","deletePatientVitals","deletePatientExaminationItem","type","deletePatientExamination","deletePatientHistoryItem","deletePatientHistory","deletePatientAllergiesItem","deletePatientAllergies","deletePatientMedicationItem","deletePatientMedication","deletePatientInvestigationItem","deletePatientInvestigation","deletePatientDiagnosisItem","deletePatientDiagnosis","deletePatientTreatmentItem","deletePatientTreatment","deletePatientBillingItem","deletePatientBilling","deletePatientVigilanceItem","deletePatientVigilance","deletePatientAttachmentItem","deletePatientAttachment","deletePatientNoteItem","deletePatientNote","deletePatientTagItem","deletePatientTag","onViewAttachment","attachment","path","format","closeAttachmentView","args","insurance","nextOfKin","allergies","medication","attachments","notes","tags","createPdfTest","formGridDocGenUserInput","formGridDocGenVisitDate","test","createReferral","referral","letterheadImage","createReferralInput","formGridDocGenReferralVisitDate","visitTreatment","formGridDocGenReferralRecommendation","formGridDocGenReferralFindings","findings","recommendation","createOperationReminder","createOperationReminderInput","formGridDocGenOperationReminderDate","formGridDocGenOperationReminderName","time","formGridDocGenOperationReminderTime","hospitalName","formGridDocGenOperationReminderHospitalName","hospitalAddress","formGridDocGenOperationReminderHopsitalAddress","fastDate","formGridDocGenOperationReminderFastDate","fastTime","formGridDocGenOperationReminderFastTime","estimateCost","formGridDocGenOperationReminderEstimateCost","createMiscNote","createMiscNoteInput","note1","formGridDocGenMiscNote1","note2","formGridDocGenMiscNote2","createSickNote","createSickNoteInput","duration","formGridDocGenSickNoteDuration","startDate","formGridDocGenSickNoteStartDate","createInsuranceNote","createInsuranceNoteInput","operation","formGridDocGenInsuranceNoteOperation","operationDate","formGridDocGenInsuranceNoteOperationDate","surgeonFee","formGridDocGenInsuranceNoteSurgeonFee","assistantSurgeonFee","formGridDocGenInsuranceNoteAssistantSurgeonFee","anesthetistsFee","formGridDocGenInsuranceNoteAnesthetistFee","createPrescription","createProcedureConsent","createFitToFly","createTreatmentInstruction","closePdfCreator","showDetailHandler","selectVisit","closeVisit","createVisitChecklistUpdate","newState","Object","assign","newVisitComplete","showSidebar","hideSidebar","componentDidMount","updatePatientSpecial","componentWillUnmount","render","users","fetchUsers","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Nav from 'react-bootstrap/Nav';\nimport Card from 'react-bootstrap/Card';\n\nimport PatientList from '../components/Patients/PatientList/PatientList';\nimport PatientDetail from '../components/Patients/PatientDetail';\nimport Spinner from '../components/Spinner/Spinner';\nimport AuthContext from '../context/auth-context';\nimport SearchPatientList from '../components/Patients/PatientList/SearchPatientList';\nimport SearchPatientForm from '../components/Forms/SearchPatientForm';\nimport SearchPatientIdForm from '../components/Forms/SearchPatientIdForm';\nimport SearchPatientNameForm from '../components/Forms/SearchPatientNameForm';\n\nimport AlertBox from '../components/AlertBox';\nimport AttachmentViewer from '../components/AttachmentViewer';\nimport PdfCreator from '../components/PdfCreator';\nimport LoadingOverlay from '../components/LoadingOverlay';\nimport SidebarPage from './Sidebar';\nimport SidebarControl from '../components/SidebarControl';\n\nimport CreatePatientForm from '../components/Forms/CreatePatientForm';\nimport UpdatePatientForm from '../components/Forms/UpdatePatientForm';\nimport UpdatePatientFieldForm from '../components/Forms/UpdatePatientFieldForm';\nimport UpdatePatientConsultantForm from '../components/Forms/UpdatePatientConsultantForm';\nimport UpdatePatientInsuranceForm from '../components/Forms/UpdatePatientInsuranceForm';\nimport UpdatePatientNextOfKinForm from '../components/Forms/UpdatePatientNextOfKinForm';\nimport UpdatePatientComplaintForm from '../components/Forms/UpdatePatientComplaintForm';\nimport UpdatePatientSurveyForm from '../components/Forms/UpdatePatientSurveyForm';\nimport UpdatePatientSystematicInquiryForm from '../components/Forms/UpdatePatientSystematicInquiryForm';\nimport UpdatePatientVitalsForm from '../components/Forms/UpdatePatientVitalsForm';\nimport UpdatePatientExaminationForm from '../components/Forms/UpdatePatientExaminationForm';\nimport UpdatePatientHistoryForm from '../components/Forms/UpdatePatientHistoryForm';\nimport UpdatePatientAllergiesForm from '../components/Forms/UpdatePatientAllergiesForm';\nimport UpdatePatientMedicationForm from '../components/Forms/UpdatePatientMedicationForm';\nimport UpdatePatientInvestigationForm from '../components/Forms/UpdatePatientInvestigationForm';\nimport UpdatePatientDiagnosisForm from '../components/Forms/UpdatePatientDiagnosisForm';\nimport UpdatePatientTreatmentForm from '../components/Forms/UpdatePatientTreatmentForm';\nimport UpdatePatientBillingForm from '../components/Forms/UpdatePatientBillingForm';\nimport UpdatePatientVigilanceForm from '../components/Forms/UpdatePatientVigilanceForm';\nimport UpdatePatientAttachmentForm from '../components/Forms/UpdatePatientAttachmentForm';\nimport UpdatePatientNoteForm from '../components/Forms/UpdatePatientNoteForm';\nimport UpdatePatientTagForm from '../components/Forms/UpdatePatientTagForm';\n\nimport './Users.css';\n\nclass PatientsPage extends Component {\n  state = {\n    creating: false,\n    updating: false,\n    searching: false,\n    updatingArray: false,\n    deleting: false,\n    patients: [],\n    searchPatients: [],\n    isLoading: false,\n    selectedPatient: null,\n    selectedUser: null,\n    patientUpdateField: null,\n    patientSearchField: null,\n    patientSearchQuery: null,\n    canDelete: null,\n    visit: null,\n    visitList: [],\n    selectedVisit: null,\n    newVisit: false,\n    createVisitChecklist: {\n      consultant: false,\n      complaint: false,\n      diagnosis: false,\n      examination: false,\n      investigation: false,\n      survey: false,\n      systematicInquiry: false,\n      treatment: false,\n      vitals: false,\n      billing: false,\n      vigilance: false\n    },\n    newVisit: false,\n    userAlert: null,\n    overlay: false,\n    overlayStatus: \"test\",\n    showAttachment: false,\n    showThisAttachmentFile: null,\n    showThisAttachmentType: null,\n    creatingDocument: false,\n    createPdf: false,\n    pdfData: null,\n    pdfType: null,\n    sidebarShow: true,\n    mCol1Size: 3,\n    mCol2Size: 9\n  };\n  isActive = true;\n\n  static contextType = AuthContext;\n\n  componentDidMount() {\n    if (this.context.user.name === \"Lord-of-the-Manor\"){\n      this.setState({canDelete: true})\n    }\n\n    if (JSON.stringify(this.context.selectedPatient) !== \"{}\") {\n      this.setState({ selectedPatient: this.context.selectedPatient })\n    }\n    console.log(`this.context.selectedUser, ${JSON.stringify(this.context.selectedUser)}`);\n\n    this.fetchPatients();\n  }\n\n\n  startCreatePatientHandler = () => {\n    this.setState({ creating: true });\n  };\n  startCreateVisitHandler = () => {\n    this.setState({ newVisit: true });\n  };\n  startUpdatePatientHandler = () => {\n    this.setState({ updating: true, updatingArray: true });\n  };\n  startSearchPatientHandler = () => {\n    this.setState({ searching: true });\n  };\n\n  modalConfirmHandler = (event) => {\n\n    this.setState({ creating: false, userAlert: \"Creating New Patient ...\" });\n    const userId = this.context.userId;\n    const token = this.context.token;\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.patientCalendarRegistrationDate.value !== null &&\n      event.target.formGridRegistrationDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0,10));\n      registrationDate = new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0,10);\n    }\n\n\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.patientCalendarReferralDate.value !== null &&\n      event.target.formGridReferralDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0,10));\n      referralDate = new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (\n      name.trim().length === 0 ||\n      age.trim().length === 0 ||\n      addressNumber.trim().length === 0 ||\n      addressStreet.trim().length === 0 ||\n      contactPhone.trim().length === 0 ||\n      registrationDate.trim().length === 0\n    ) {\n      this.setState({userAlert: \"patient must have at least: Name, Age, Contact Number, Street Name & Number and Registration Date!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n      query: `\n        mutation {createPatient(userId:\"${userId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactEmail}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `};\n\n    // fetch('http://ec2-3-19-32-237.us-east-2.compute.amazonaws.com/graphql', {\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const responseAlert = JSON.stringify(resData.data).slice(2,15);\n        this.setState({userAlert: responseAlert});\n        const newPatient = resData.data.createPatient;\n        this.setState(prevState => {\n          const updatedPatients = [...prevState.patients];\n          updatedPatients.push(newPatient);\n          return { patients: updatedPatients };\n        });\n        this.setState({selecteAppointment: resData.data.createPatient})\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false });\n  };\n\n\n  modalConfirmUpdateHandler = (event) => {\n\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n    const token = this.context.token;\n\n    this.setState({ updating: false , userAlert: \"Updating selected Patient...\"});\n\n    let title = event.target.formGridTitle.value;\n    let name = event.target.formGridName.value;\n    let dob = event.target.formGridDob.value;\n    let age = event.target.formGridAge.value;\n    let gender = event.target.formGridGender.value;\n    let addressNumber = event.target.formGridAddressNumber.value;\n    let addressStreet = event.target.formGridAddressStreet.value;\n    let addressTown = event.target.formGridAddressTown.value;\n    let addressParish = event.target.formGridAddressParish.value;\n    let addressPostOffice = event.target.formGridAddressPostOffice.value;\n    let contactPhone = event.target.formGridContactPhone.value;\n    let contactEmail = event.target.formGridContactEmail.value;\n\n    let registrationDate = event.target.formGridRegistrationDate.value;\n    if (event.target.formGridRegistrationDateTodayCheckbox.checked === true) {\n      registrationDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.patientCalendarRegistrationDate.value !== null &&\n      event.target.formGridRegistrationDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0,10));\n      registrationDate = new Date(event.target.patientCalendarRegistrationDate.value).toISOString().slice(0,10);\n    }\n\n\n    let referralDate = event.target.formGridReferralDate.value;\n    if (event.target.formGridReferralDateTodayCheckbox.checked === true) {\n      referralDate = new Date().toISOString().slice(0,10);\n    }\n\n    if (\n      event.target.patientCalendarReferralDate.value !== null &&\n      event.target.formGridReferralDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0,10));\n      referralDate = new Date(event.target.patientCalendarReferralDate.value).toISOString().slice(0,10);\n    }\n\n    let expirationDate = event.target.formGridExpirationDate.value;\n    if (event.target.formGridExpirationDateTodayCheckbox.checked === true) {\n      expirationDate = new Date().toISOString().slice(0,10);\n    }\n    if (\n      event.target.patientCalendarExpirationDate.value !== null &&\n      event.target.formGridExpirationDateTodayCheckbox.checked !== true\n    ) {\n      console.log(\"fancyDate2\", new Date(event.target.patientCalendarExpirationDate.value).toISOString().slice(0,10));\n      expirationDate = new Date(event.target.patientCalendarExpirationDate.value).toISOString().slice(0,10);\n    }\n\n    let attendingPhysicianName = event.target.formGridAttendingPhysicianName.value;\n    let attendingPhysicianEmail = event.target.formGridAttendingPhysicianEmail.value;\n    let attendingPhysicianPhone = event.target.formGridAttendingPhysicianPhone.value;\n    let referringDoctorName = event.target.formGridReferringDoctorName.value;\n    let referringDoctorEmail = event.target.formGridReferringDoctorEmail.value;\n    let referringDoctorPhone = event.target.formGridReferringDoctorPhone.value;\n    let occupationRole = event.target.formGridOccupationRole.value;\n    let occupationEmployer = event.target.formGridOccupationEmployer.value;\n    let occupationEmployerContactPhone = event.target.formGridOccupationEmployerContactPhone.value;\n    let occupationEmployerContactEmail = event.target.formGridOccupationEmployerContactEmail.value;\n\n    if (title.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      title = this.context.selectedPatient.title;\n    }\n    if (name.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      name = this.context.selectedPatient.name;\n    }\n    if (dob.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      dob = this.context.selectedPatient.dob;\n    }\n    if (gender.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      gender = this.context.selectedPatient.gender;\n    }\n    if (age.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      age = this.context.selectedPatient.age;\n    }\n    if (addressNumber.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressNumber = this.context.selectedPatient.address.number;\n    }\n    if (addressStreet.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressStreet = this.context.selectedPatient.address.street;\n    }\n    if (addressTown.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressTown = this.context.selectedPatient.address.town;\n    }\n    if (addressParish.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressParish = this.context.selectedPatient.address.parish;\n    }\n    if (addressPostOffice.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      addressPostOffice = this.context.selectedPatient.address.postOffice;\n    }\n    if (contactPhone.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      contactPhone = this.context.selectedPatient.contact.phone;\n    }\n    if (contactEmail.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      contactEmail = this.context.selectedPatient.contact.email;\n    }\n    if (registrationDate.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      registrationDate = this.context.selectedPatient.registrationDate;\n    }\n    if (attendingPhysicianName.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendingPhysicianName = this.context.selectedPatient.attendingPhysician.name;\n    }\n    if (attendingPhysicianEmail.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendingPhysicianEmail = this.context.selectedPatient.attendingPhysician.email;\n    }\n    if (attendingPhysicianPhone.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      attendingPhysicianPhone = this.context.selectedPatient.attendingPhysician.phone;\n    }\n    if (referringDoctorName.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      referringDoctorName = this.context.selectedPatient.referringDoctor.name;\n    }\n    if (referringDoctorEmail.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      referringDoctorEmail = this.context.selectedPatient.referringDoctor.email;\n    }\n    if (referringDoctorPhone.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      referringDoctorPhone = this.context.selectedPatient.referringDoctor.phone;\n    }\n    if (occupationRole.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      occupationRole = this.context.selectedPatient.occupation.role;\n    }\n    if (occupationEmployer.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      occupationEmployer = this.context.selectedPatient.occupation.employer;\n    }\n    if (occupationEmployerContactEmail.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      occupationEmployerContactEmail = this.context.selectedPatient.occupation.contact.email;\n    }\n    if (occupationEmployerContactPhone.trim().length === 0 ) {\n      this.setState({ userAlert: \"blank fields detected!!!...filling w/ previous data...\"});\n      occupationEmployerContactPhone = this.context.selectedPatient.occupation.contact.phone;\n    }\n\n    const requestBody = {\n      query: `\n          mutation {updatePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\", patientInput:{title:\"${title}\",name:\"${name}\",dob:\"${dob}\",age:${age},gender:\"${gender}\",addressNumber:${addressNumber},addressStreet:\"${addressStreet}\",addressTown:\"${addressTown}\",addressParish:\"${addressParish}\",addressPostOffice:\"${addressPostOffice}\",contactPhone:\"${contactPhone}\",contactEmail:\"${contactEmail}\",registrationDate:\"${registrationDate}\",referralDate:\"${referralDate}\",expirationDate:\"${expirationDate}\",referringDoctorName:\"${referringDoctorName}\",referringDoctorEmail:\"${referringDoctorEmail}\",referringDoctorPhone:\"${referringDoctorPhone}\",attendingPhysicianName:\"${attendingPhysicianName}\",attendingPhysicianEmail:\"${attendingPhysicianEmail}\",attendingPhysicianPhone:\"${attendingPhysicianPhone}\",occupationRole:\"${occupationRole}\",occupationEmployer:\"${occupationEmployer}\",occupationEmployerContactPhone:\"${occupationEmployerContactPhone}\",occupationEmployerContactEmail:\"${occupationEmployerContactPhone}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedPatientId = resData.data.updatePatient._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatient);\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.fetchPatients();\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatient })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  };\n\n\n  modalConfirmUpdateFieldHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    let selectedPatientId = this.context.selectedPatient._id;\n    this.setState({ updating: false, userAlert: \"Updating selected Patient by Field...\" });\n\n    let field = null;\n    let query = event.target.formGridQuery.value;\n    if (event.target.formGridFieldSelect.value === \"select\") {\n      field = event.target.formGridField.value;\n    } else {\n      field = event.target.formGridFieldSelect.value;\n    }\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientField(userId:\"${userId}\",patientId:\"${selectedPatientId}\",field:\"${field}\",query:\"${query}\")\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedPatientId = resData.data.updatePatientField._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientField);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.fetchPatients();\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientField })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n  }\n\n\nupdatePatientConsultantHandler = (event) => {\n\n  event.preventDefault();\n  let token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  const patientConsultantReference = this.context.selectedUser._id;\n  if (patientConsultantReference === undefined) {\n      this.setState({userAlert: \"select a Staff member before adding a Patient Consultant!!...\"});\n      token = null;\n  }\n\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Consultant...\" });\n\n  let consultantDate = null;\n  if (event.target.formGridConsultantDate) {\n    consultantDate = event.target.formGridConsultantDate.value;\n  }\n  if (event.target.formGridConsultantDateTodayCheckbox.checked === true) {\n    consultantDate = new Date().toISOString().slice(0,10);\n  }\n\n  if (\n    event.target.patientConsultantCalendarDate.value !== null &&\n    event.target.formGridConsultantDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientConsultantCalendarDate.value).toISOString().slice(0,10));\n    consultantDate = new Date(event.target.patientConsultantCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientConsultant(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{consultantDate:\" ${consultantDate}\",consultantReference: \"${patientConsultantReference}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  };\n\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientConsultant._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientConsultant);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientConsultant })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientInsuranceHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Insurance...\" });\n  let insuranceCompany = event.target.formGridInsuranceCompany.value;\n  let insuranceNumber = event.target.formGridInsuranceNumber.value;\n  let insuranceExpiry = event.target.patientCalendarInsuranceExpiryDate.value;\n  // if (event.target.patientCalendarInsuranceExpiryDate.value !== null &&\n  //   event.target.formGridInsuranceExpiry.value === null\n  //   ) {\n  //   console.log(`patientCalendarInsuranceExpiryDate: ${new Date(event.target.patientCalendarInsuranceExpiryDate.value).toISOString().slice(0,10)} `);\n  //   insuranceExpiry = new Date(event.target.patientCalendarInsuranceExpiryDate.value).toISOString().slice(0,10);\n  // }\n\n  let insuranceDescription = event.target.formGridInsuranceDescription.value;\n  let insuranceSubscriberCompany = event.target.formGridInsuranceSubscriberCompany.value;\n  let insuranceSubscriberDescription = event.target.formGridInsuranceSubscriberDescription.value;\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientInsurance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{insuranceCompany:\"${insuranceCompany}\",insuranceNumber:\"${insuranceNumber}\",insuranceDescription:\"${insuranceDescription}\",insuranceExpiry:\"${insuranceExpiry}\",insuranceSubscriberCompany:\"${insuranceSubscriberCompany}\",insuranceSubscriberDescription:\"${insuranceSubscriberDescription}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientInsurance._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientInsurance);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInsurance })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientNextOfKinHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Next of Kin...\" });\n  let nextOfKinName = event.target.formGridNextOfKinName.value;\n  let nextOfKinPhone = event.target.formGridNextOfKinPhone.value;\n  let nextOfKinEmail = event.target.formGridNextOfKinEmail.value;\n\n    const requestBody = {\n      query:`\n        mutation {updatePatientNextOfKin(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{nextOfKinName:\"${nextOfKinName}\",nextOfKinEmail:\"${nextOfKinEmail}\",nextOfKinPhone:\"${nextOfKinPhone}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedPatientId = resData.data.updatePatientNextOfKin._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientNextOfKin);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.fetchPatients();\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNextOfKin })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n}\n\nupdatePatientComplaintHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Complaint...\" });\n\n  let complaintTitle = event.target.formGridComplaintTitle.value;\n\n  let complaintDate = null;\n  if (event.target.formGridComplaintDate) {\n    complaintDate = event.target.formGridComplaintDate.value;\n  }\n  if (event.target.formGridComplaintDateTodayCheckbox.checked === true) {\n    complaintDate = new Date().toISOString().slice(0,10);\n  }\n\n  if (\n    event.target.patientComplaintCalendarDate.value !== null &&\n    event.target.formGridComplaintDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientComplaintCalendarDate.value).toISOString().slice(0,10));\n    complaintDate = new Date(event.target.patientComplaintCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  let complaintDescription = event.target.formGridComplaintDescription.value;\n  let complaintAnamnesis = event.target.formGridComplaintAnamnesis.value;\n  let complaintAttachmentFormat = event.target.formGridComplaintAttachmentFormat.value;\n  let complaintAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/complaints\";\n  let file = AuthContext._currentValue.file;\n\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: complaintAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const complaintAttachmentName = newFileName;\n  this.setState({userAlert: \"uploading attachment ...\"});\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientComplaint(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{complaintDate:\"${complaintDate}\",complaintTitle:\"${complaintTitle}\",complaintDescription:\"${complaintDescription}\",complaintAnamnesis:\"${complaintAnamnesis}\",complaintAttachmentName:\"${complaintAttachmentName}\",complaintAttachmentFormat:\"${complaintAttachmentFormat}\",complaintAttachmentPath:\"${complaintAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientComplaint._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientComplaint);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientComplaint })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientSurveyHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Survey...\" });\n\n  let surveyDate = null;\n  if (event.target.formGridSurveyDate) {\n    surveyDate = event.target.formGridSurveyDate.value;\n  }\n  if (event.target.formGridSurveyDateTodayCheckbox.checked === true) {\n    surveyDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientSurveyCalendarDate.value !== null &&\n    event.target.formGridSurveyDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientSurveyCalendarDate.value).toISOString().slice(0,10));\n    surveyDate = new Date(event.target.patientSurveyCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  let surveyTitle = event.target.formGridSurveyTitle.value;\n  let surveyDescription = event.target.formGridSurveyDescription.value;\n  let surveyAttachmentFormat = event.target.formGridSurveyAttachmentFormat.value;\n  let surveyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/surveys\";\n  let file = AuthContext._currentValue.file;\n\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: surveyAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const surveyAttachmentName = newFileName;\n  this.setState({userAlert: \"uploading attachment ...\"});\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientSurvey(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{surveyDate:\"${surveyDate}\",surveyTitle:\"${surveyTitle}\",surveyDescription:\"${surveyDescription}\",surveyAttachmentName:\"${surveyAttachmentName}\",surveyAttachmentFormat:\"${surveyAttachmentFormat}\",surveyAttachmentPath:\"${surveyAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientSurvey._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientSurvey);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientSurvey })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientSystematicInquiryHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  let selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Systematic Inquiry...\" });\n\n  let systematicInquiryDate = null;\n  if (event.target.formGridSystematicInquiryDate) {\n    systematicInquiryDate = event.target.formGridSystematicInquiryDate.value;\n  }\n  if (event.target.formGridSystematicInquiryDateTodayCheckbox.checked === true) {\n    systematicInquiryDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientSystematicInquiryCalendarDate.value !== null &&\n    event.target.formGridSystematicInquiryDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientSystematicInquiryCalendarDate.value).toISOString().slice(0,10));\n    systematicInquiryDate = new Date(event.target.patientSystematicInquiryCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  let systematicInquiryTitle = event.target.formGridSystematicInquiryTitle.value;\n  let systematicInquiryDescription = event.target.formGridSystematicInquiryDescription.value;\n  let systematicInquiryAttachmentFormat = event.target.formGridSystematicInquiryAttachmentFormat.value;\n  let systematicInquiryAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/systematicInquirys\";\n  let file = AuthContext._currentValue.file;\n\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: systematicInquiryAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const systematicInquiryAttachmentName = newFileName;\n  this.setState({userAlert: \"uploading attachment ...\"});\n\n  // ReactS3Client\n  //     .uploadFile(file, newFileName)\n  //     .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n  //     .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientSystematicInquiry(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{systematicInquiryDate:\"${systematicInquiryDate}\",systematicInquiryTitle:\"${systematicInquiryTitle}\",systematicInquiryDescription:\"${systematicInquiryDescription}\",systematicInquiryAttachmentName:\"${systematicInquiryAttachmentName}\",systematicInquiryAttachmentFormat:\"${systematicInquiryAttachmentFormat}\",systematicInquiryAttachmentPath:\"${systematicInquiryAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientSystematicInquiry._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientSystematicInquiry);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientSystematicInquiry })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientVitalsHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Vitals...\" });\n\n  let vitalsDate = null;\n  if (event.target.formGridVitalsDate) {\n    vitalsDate = event.target.formGridVitalsDate.value;\n  }\n  if (event.target.formGridVitalsDateTodayCheckbox.checked === true) {\n    vitalsDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientVitalsCalendarDate.value !== null &&\n    event.target.formGridVitalsDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientVitalsCalendarDate.value).toISOString().slice(0,10));\n    vitalsDate = new Date(event.target.patientVitalsCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const vitalsPr = event.target.formGridVitalsPr.value;\n  const vitalsBp1 = event.target.formGridVitalsBp1.value;\n  const vitalsBp2 = event.target.formGridVitalsBp2.value;\n  const vitalsRr = event.target.formGridVitalsRr.value;\n  const vitalsTemp = event.target.formGridVitalsTemp.value;\n  const vitalsPs02 = event.target.formGridVitalsPs02.value;\n  const vitalsHeight = event.target.formGridVitalsHeight.value;\n  const vitalsWeight = event.target.formGridVitalsWeight.value;\n  const vitalsBmi = event.target.formGridVitalsBmi.value;\n  const vitalsUrineType = event.target.formGridVitalsUrineType.value;\n  const vitalsUrineValue = event.target.formGridVitalsUrineValue.value;\n  const requestBody = {\n    query:`\n      mutation {updatePatientVitals(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{vitalsDate:\"${vitalsDate}\",vitalsPr:${vitalsPr},vitalsBp1:${vitalsBp1},vitalsBp2:${vitalsBp2},vitalsRr:${vitalsRr},vitalsTemp:${vitalsTemp},vitalsPs02:${vitalsPs02},vitalsHeight:${vitalsHeight},vitalsWeight:${vitalsWeight},vitalsBmi:${vitalsBmi},vitalsUrineType:\"${vitalsUrineType}\",vitalsUrineValue:\"${vitalsUrineValue}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientVitals._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientVitals);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientVitals })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientExaminationHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Examination...\" });\n\n  let examinationDate = null;\n  if (event.target.formGridExaminationDate) {\n    examinationDate = event.target.formGridExaminationDate.value;\n  }\n  if (event.target.formGridExaminationDateTodayCheckbox.checked === true) {\n    examinationDate = new Date().toISOString().slice(0,10);\n  }\n  if (\n    event.target.patientExaminationCalendarDate.value !== null &&\n    event.target.formGridExaminationDateTodayCheckbox.checked !== true\n  ) {\n    console.log(\"fancyDate2\", new Date(event.target.patientExaminationCalendarDate.value).toISOString().slice(0,10));\n    surveyDate = new Date(event.target.patientExaminationCalendarDate.value).toISOString().slice(0,10);\n  }\n\n  const examinationGeneral = event.target.formGridExaminationGeneral.value;\n  let examinationArea = undefined;\n  if (event.target.formGridExaminationAreaSelect.value === \"select\") {\n    examinationArea = event.target.formGridExaminationArea.value;\n  } else {\n    examinationArea = event.target.formGridExaminationAreaSelect.value;\n  }\n  const examinationType = event.target.formGridExaminationType.value;\n  const examinationMeasure = event.target.formGridExaminationMeasure.value;\n  const examinationValue = event.target.formGridExaminationValue.value;\n  const examinationDescription = event.target.formGridExaminationDescription.value;\n  const examinationFollowUp = event.target.formGridExaminationFollowUp.value;\n  const examinationAttachmentFormat = event.target.formGridExaminationAttachmentFormat.value;\n  const examinationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/examinations\";\n  const file = AuthContext._currentValue.file;\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: examinationAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const examinationAttachmentName = newFileName;\n\n  this.setState({userAlert: \"uploading attachment ...\"})\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientExamination(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{examinationDate:\"${examinationDate}\",examinationGeneral:\"${examinationGeneral}\",examinationArea:\"${examinationArea}\",examinationType:\"${examinationType}\",examinationMeasure:\"${examinationMeasure}\",examinationValue:\"${examinationValue}\",examinationDescription:\"${examinationDescription}\",examinationFollowUp:${examinationFollowUp},examinationAttachmentName:\"${examinationAttachmentName}\",examinationAttachmentFormat:\"${examinationAttachmentFormat}\",examinationAttachmentPath:\"${examinationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientExamination._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientExamination);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientExamination })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\n\nupdatePatientHistoryHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient History...\" });\n\n  const historyType = event.target.formGridHistoryType.value;\n  let historyDate = event.target.formGridHistoryDate.value;\n  if (event.target.formGridHistoryDateTodayCheckbox.checked === true) {\n    historyDate = new Date().toISOString().slice(0,10);\n  }\n\n  const historyTitle = event.target.formGridHistoryTitle.value;\n  const historyDescription = event.target.formGridHistoryDescription.value;\n  const historyAttachmentFormat = event.target.formGridHistoryAttachmentFormat.value;\n  const historyAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/history\";\n  const file = AuthContext._currentValue.file;\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: historyAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const historyAttachmentName = newFileName;\n  this.setState({userAlert: \"uploading attachment ...\"});\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientHistory(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{historyTitle:\"${historyTitle}\",historyType:\"${historyType}\",historyDate:\"${historyDate}\",historyDescription:\"${historyDescription}\",historyAttachmentName:\"${historyAttachmentName}\",historyAttachmentFormat:\"${historyAttachmentFormat}\",historyAttachmentPath:\"${historyAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientHistory._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientHistory);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientHistory })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\n\nupdatePatientAllergiesHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Allergies...\" });\n\n  const allergiesTitle = event.target.formGridAllergiesTitle.value;\n  let allergiesType = undefined;\n  if (event.target.formGridAllergiesTypeSelect === \"select\") {\n    allergiesType = event.target.formGridAllergiesType.value;\n  } else {\n    allergiesType = event.target.formGridAllergiesTypeSelect.value;\n  }\n  const allergiesDescription = event.target.formGridAllergiesDescription.value;\n  const allergiesAttachmentFormat = event.target.formGridAllergiesAttachmentFormat.value;\n  const allergiesAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/allergies\";\n  const file = AuthContext._currentValue.file;\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: allergiesAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const allergiesAttachmentName = newFileName;\n  this.setState({userAlert: \"uploading attachment ...\"});\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientAllergies(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{allergiesTitle:\"${allergiesTitle}\",allergiesType:\"${allergiesType}\", allergiesDescription:\"${allergiesDescription}\",allergiesAttachmentName:\"${allergiesAttachmentName}\",allergiesAttachmentFormat:\"${allergiesAttachmentFormat}\",allergiesAttachmentPath:\"${allergiesAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientAllergies._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientAllergies);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAllergies })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientMedicationHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Medication...\" });\n\n  const medicationTitle = event.target.formGridMedicationTitle.value;\n  const medicationType = event.target.formGridMedicationType.value;\n  const medicationDescription = event.target.formGridMedicationDescription.value;\n  const medicationAttachmentFormat = event.target.formGridMedicationAttachmentFormat.value;\n  const medicationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/medication\";\n  const file = AuthContext._currentValue.file;\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: medicationAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const medicationAttachmentName = newFileName;\n  this.setState({userAlert: \"uploading attachment ...\"});\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n    mutation {updatePatientMedication(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{medicationTitle:\"${medicationTitle}\",medicationType:\"${medicationType}\" medicationDescription:\"${medicationDescription}\",medicationAttachmentName:\"${medicationAttachmentName}\",medicationAttachmentFormat:\"${medicationAttachmentFormat}\",medicationAttachmentPath:\"${medicationAttachmentPath}\"})\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientMedication._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientMedication);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientMedication })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n\n}\n\n\nupdatePatientInvestigationHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Investigation...\" });\n\n  let investigationDate = null;\n  if (event.target.formGridInvestigationDate) {\n    investigationDate = event.target.formGridInvestigationDate.value;\n  }\n  if (event.target.formGridInvestigationDateTodayCheckbox.checked === true) {\n    investigationDate = new Date().toISOString().slice(0,10);\n  }\n  const investigationTitle = event.target.formGridInvestigationTitle.value;\n  let investigationType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    investigationType = event.target.formGridInvestigationType.value;\n  } else {\n    investigationType = event.target.formGridInvestigationTypeSelect.value;\n  }\n  const investigationDescription = event.target.formGridInvestigationDescription.value;\n  const investigationAttachmentFormat = event.target.formGridInvestigationAttachmentFormat.value;\n  const investigationAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/investigation\";\n  const file = AuthContext._currentValue.file;\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: investigationAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const investigationAttachmentName = newFileName;\n  this.setState({userAlert: \"uploading attachment ...\"});\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientInvestigation(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{investigationDate:\"${investigationDate}\",investigationTitle:\"${investigationTitle}\",investigationType:\"${investigationType}\",investigationDescription:\"${investigationDescription}\",investigationAttachmentName:\"${investigationAttachmentName}\",investigationAttachmentFormat:\"${investigationAttachmentFormat}\",investigationAttachmentPath:\"${investigationAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientInvestigation._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientInvestigation);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientInvestigation })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientDiagnosisHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Diagnosis...\" });\n\n  let diagnosisDate = null;\n  if (event.target.formGridDiagnosisDate) {\n    diagnosisDate = event.target.formGridDiagnosisDate.value;\n  }\n  if (event.target.formGridDiagnosisDateTodayCheckbox.checked === true) {\n    diagnosisDate = new Date().toISOString().slice(0,10);\n  }\n  const diagnosisTitle = event.target.formGridDiagnosisTitle.value;\n  const diagnosisType = event.target.formGridDiagnosisType.value;\n  const diagnosisDescription = event.target.formGridDiagnosisDescription.value;\n  const diagnosisAttachmentFormat = event.target.formGridDiagnosisAttachmentFormat.value;\n  const diagnosisAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/diagnosis\";\n  const file = AuthContext._currentValue.file;\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: diagnosisAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const diagnosisAttachmentName = newFileName;\n  this.setState({userAlert: \"uploading attachment ...\"});\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientDiagnosis(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{diagnosisDate:\"${diagnosisDate}\",diagnosisTitle:\"${diagnosisTitle}\",diagnosisType:\"${diagnosisType}\",diagnosisDescription:\"${diagnosisDescription}\",diagnosisAttachmentName:\"${diagnosisAttachmentName}\",diagnosisAttachmentFormat:\"${diagnosisAttachmentFormat}\",diagnosisAttachmentPath:\"${diagnosisAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientDiagnosis._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientDiagnosis);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientDiagnosis })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientTreatmentHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Treatment...\" });\n\n  let treatmentDate = null;\n  if (event.target.formGridTreatmentDate) {\n    treatmentDate = event.target.formGridTreatmentDate.value;\n  }\n  if (event.target.formGridTreatmentDateTodayCheckbox.checked === true) {\n    treatmentDate = new Date().toISOString().slice(0,10);\n  }\n\n  const treatmentTitle = event.target.formGridTreatmentTitle.value;\n  const treatmentDescription = event.target.formGridTreatmentDescription.value;\n  const treatmentDose = event.target.formGridTreatmentDose.value;\n  const treatmentFrequency = event.target.formGridTreatmentFrequency.value;\n  let treatmentType = undefined;\n  if (event.target.formGridInvestigationTypeSelect === \"select\") {\n    treatmentType = event.target.formGridTreatmentType.value;\n  } else {\n    treatmentType = event.target.formGridTreatmentTypeSelect.value;\n  }\n  const treatmentAttachmentFormat = event.target.formGridTreatmentAttachmentFormat.value;\n  const treatmentAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/treatment\";\n  const file = AuthContext._currentValue.file;\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: treatmentAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const treatmentAttachmentName = newFileName;\n  this.setState({userAlert: \"uploading attachment ...\"});\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientTreatment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{treatmentDate:\"${treatmentDate}\",treatmentTitle:\"${treatmentTitle}\",treatmentType:\"${treatmentType}\",treatmentDescription:\"${treatmentDescription}\",treatmentDose:\"${treatmentDose}\",treatmentFrequency:\"${treatmentFrequency}\",treatmentAttachmentName:\"${treatmentAttachmentName}\",treatmentAttachmentFormat:\"${treatmentAttachmentFormat}\",treatmentAttachmentPath:\"${treatmentAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `}\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientTreatment._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientTreatment);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTreatment })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientBillingHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Billing...\" });\n\n  let billingDate = null;\n  if (event.target.formGridBillingDate) {\n    billingDate = event.target.formGridBillingDate.value;\n  }\n  if (event.target.formGridBillingDateTodayCheckbox.checked === true) {\n    billingDate = new Date().toISOString().slice(0,10);\n  }\n\n  const billingTitle = event.target.formGridBillingTitle.value;\n  const billingType = event.target.formGridBillingType.value;\n  const billingDescription = event.target.formGridBillingDescription.value;\n  const billingAmount = event.target.formGridBillingAmount.value;\n  const billingPaid = event.target.formGridBillingPaid.value;\n  const billingNotes = event.target.formGridBillingNotes.value;\n  const billingAttachmentFormat = event.target.formGridBillingAttachmentFormat.value;\n  const billingAttachmentPath = \"uploads/patients/\"+selectedPatientId+\"/billing\";\n  const file = AuthContext._currentValue.file;\n  const config = {\n    bucketName: this.context.creds.s3.bucketName,\n    dirName: billingAttachmentPath,\n    region: this.context.creds.s3.region,\n    accessKeyId: this.context.creds.s3.accessKeyId,\n    secretAccessKey: this.context.creds.s3.secretAccessKey,\n  }\n  const ReactS3Client = new S3(config);\n  const newFileName = file.name;\n  const billingAttachmentName = newFileName;\n  this.setState({userAlert: \"uploading attachment ...\"});\n\n  ReactS3Client\n      .uploadFile(file, newFileName)\n      .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n      .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n  const requestBody = {\n    query:`\n      mutation {updatePatientBilling(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{billingDate:\"${billingDate}\",billingTitle:\"${billingTitle}\",billingType:\"${billingType}\",billingDescription:\"${billingDescription}\",billingAmount:${billingAmount},billingPaid:${billingPaid},billingNotes:\"${billingNotes}\",billingAttachmentName:\"${billingAttachmentName}\",billingAttachmentFormat:\"${billingAttachmentFormat}\",billingAttachmentPath:\"${billingAttachmentPath}\"})\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n  }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientBilling._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientBilling);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientBilling })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientVigilanceHandler = (event) => {\n\n  event.preventDefault();\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Vigilance...\" });\n\n  let vigilanceDate = null;\n  if (event.target.formGridVigilanceDate) {\n    vigilanceDate = event.target.formGridVigilanceDate.value;\n  }\n  if (event.target.formGridVigilanceDateTodayCheckbox.checked === true) {\n    vigilanceDate = new Date().toISOString().slice(0,10);\n  }\n  const vigilanceChronicIllnessDiabetesMedication = event.target.formGridVigilanceChronicIllnessDiabetesMedication.checked;\n  const vigilanceChronicIllnessDiabetesTesting = event.target.formGridVigilanceChronicIllnessDiabetesTesting.checked;\n  const vigilanceChronicIllnessDiabetesComment = event.target.formGridVigilanceChronicIllnessDiabetesComment.value;\n  const vigilanceChronicIllnessHbpMedication = event.target.formGridVigilanceChronicIllnessHbpMedication.checked;\n  const vigilanceChronicIllnessHbpTesting = event.target.formGridVigilanceChronicIllnessHbpTesting.checked;\n  const vigilanceChronicIllnessHbpComment = event.target.formGridVigilanceChronicIllnessHbpComment.value;\n  const vigilanceChronicIllnessDyslipidemiaMedication = event.target.formGridVigilanceChronicIllnessDyslipidemiaMedication.checked;\n  const vigilanceChronicIllnessDyslipidemiaTesting = event.target.formGridVigilanceChronicIllnessDyslipidemiaTesting.checked;\n  const vigilanceChronicIllnessDyslipidemiaComment = event.target.formGridVigilanceChronicIllnessDyslipidemiaComment.value;\n  const vigilanceChronicIllnessCadMedication = event.target.formGridVigilanceChronicIllnessCadMedication.checked;\n  const vigilanceChronicIllnessCadTesting = event.target.formGridVigilanceChronicIllnessCadTesting.checked;\n  const vigilanceChronicIllnessCadComment = event.target.formGridVigilanceChronicIllnessCadComment.value;\n  const vigilanceLifestyleWeightMedication = event.target.formGridVigilanceLifestyleWeightMedication.checked;\n  const vigilanceLifestyleWeightTesting = event.target.formGridVigilanceLifestyleWeightTesting.checked;\n  const vigilanceLifestyleWeightComment = event.target.formGridVigilanceLifestyleWeightComment.value;\n  const vigilanceLifestyleDietMedication = event.target.formGridVigilanceLifestyleDietMedication.checked;\n  const vigilanceLifestyleDietTesting = event.target.formGridVigilanceLifestyleDietTesting.checked;\n  const vigilanceLifestyleDietComment = event.target.formGridVigilanceLifestyleDietComment.value;\n  const vigilanceLifestyleSmokingMedication = event.target.formGridVigilanceLifestyleSmokingMedication.checked;\n  const vigilanceLifestyleSmokingTesting = event.target.formGridVigilanceLifestyleSmokingTesting.checked;\n  const vigilanceLifestyleSmokingComment = event.target.formGridVigilanceLifestyleSmokingComment.value;\n  const vigilanceLifestyleSubstanceAbuseMedication = event.target.formGridVigilanceLifestyleSubstanceAbuseMedication.checked;\n  const vigilanceLifestyleSubstanceAbuseTesting = event.target.formGridVigilanceLifestyleSubstanceAbuseTesting.checked;\n  const vigilanceLifestyleSubstanceAbuseComment = event.target.formGridVigilanceLifestyleSubstanceAbuseComment.value;\n  const vigilanceLifestyleExerciseMedication = event.target.formGridVigilanceLifestyleExerciseMedication.checked;\n  const vigilanceLifestyleExerciseTesting = event.target.formGridVigilanceLifestyleExerciseTesting.checked;\n  const vigilanceLifestyleExerciseComment = event.target.formGridVigilanceLifestyleExerciseComment.value;\n  const vigilanceLifestyleAllergiesMedication = event.target.formGridVigilanceLifestyleAllergiesMedication.checked;\n  const vigilanceLifestyleAllergiesTesting = event.target.formGridVigilanceLifestyleAllergiesTesting.checked;\n  const vigilanceLifestyleAllergiesComment = event.target.formGridVigilanceLifestyleAllergiesComment.value;\n  const vigilanceLifestyleAsthmaMedication = event.target.formGridVigilanceLifestyleAsthmaMedication.checked;\n  const vigilanceLifestyleAsthmaTesting = event.target.formGridVigilanceLifestyleAsthmaTesting.checked;\n  const vigilanceLifestyleAsthmaComment = event.target.formGridVigilanceLifestyleAsthmaComment.value;\n  const vigilanceScreeningBreastMedication = event.target.formGridVigilanceScreeningBreastMedication.checked;\n  const vigilanceScreeningBreastTesting = event.target.formGridVigilanceScreeningBreastTesting.checked;\n  const vigilanceScreeningBreastComment = event.target.formGridVigilanceScreeningBreastComment.value;\n  const vigilanceScreeningProstateMedication = event.target.formGridVigilanceScreeningProstateMedication.checked;\n  const vigilanceScreeningProstateTesting = event.target.formGridVigilanceScreeningProstateTesting.checked;\n  const vigilanceScreeningProstateComment = event.target.formGridVigilanceScreeningProstateComment.value;\n  const vigilanceScreeningCervixMedication = event.target.formGridVigilanceScreeningCervixMedication.checked;\n  const vigilanceScreeningCervixTesting = event.target.formGridVigilanceScreeningCervixTesting.checked;\n  const vigilanceScreeningCervixComment = event.target.formGridVigilanceScreeningCervixComment.value;\n  const vigilanceScreeningColonMedication = event.target.formGridVigilanceScreeningColonMedication.checked;\n  const vigilanceScreeningColonTesting = event.target.formGridVigilanceScreeningColonTesting.checked;\n  const vigilanceScreeningColonComment = event.target.formGridVigilanceScreeningColonComment.value;\n  const vigilanceScreeningDentalMedication = event.target.formGridVigilanceScreeningDentalMedication.checked;\n  const vigilanceScreeningDentalTesting = event.target.formGridVigilanceScreeningDentalTesting.checked;\n  const vigilanceScreeningDentalComment = event.target.formGridVigilanceScreeningDentalComment.value;\n  const vigilanceVaccinesInfluenzaMedication = event.target.formGridVigilanceVaccinesInfluenzaMedication.checked;\n  const vigilanceVaccinesInfluenzaTesting = event.target.formGridVigilanceVaccinesInfluenzaTesting.checked;\n  const vigilanceVaccinesInfluenzaComment = event.target.formGridVigilanceVaccinesInfluenzaComment.value;\n  const vigilanceVaccinesVaricellaMedication = event.target.formGridVigilanceVaccinesVaricellaMedication.checked;\n  const vigilanceVaccinesVaricellaTesting = event.target.formGridVigilanceVaccinesVaricellaTesting.checked;\n  const vigilanceVaccinesVaricellaComment = event.target.formGridVigilanceVaccinesVaricellaComment.value;\n  const vigilanceVaccinesHpvMedication = event.target.formGridVigilanceVaccinesHpvMedication.checked;\n  const vigilanceVaccinesHpvTesting = event.target.formGridVigilanceVaccinesHpvTesting.checked;\n  const vigilanceVaccinesHpvComment = event.target.formGridVigilanceVaccinesHpvComment.value;\n  const vigilanceVaccinesMmrMedication = event.target.formGridVigilanceVaccinesMmrMedication.checked;\n  const vigilanceVaccinesMmrTesting = event.target.formGridVigilanceVaccinesMmrTesting.checked;\n  const vigilanceVaccinesMmrComment = event.target.formGridVigilanceVaccinesMmrComment.value;\n  const vigilanceVaccinesTetanusMedication = event.target.formGridVigilanceVaccinesTetanusMedication.checked;\n  const vigilanceVaccinesTetanusTesting = event.target.formGridVigilanceVaccinesTetanusTesting.checked;\n  const vigilanceVaccinesTetanusComment = event.target.formGridVigilanceVaccinesTetanusComment.value;\n  const vigilanceVaccinesPneumovaxMedication = event.target.formGridVigilanceVaccinesPneumovaxMedication.checked;\n  const vigilanceVaccinesPneumovaxTesting = event.target.formGridVigilanceVaccinesPneumovaxTesting.checked;\n  const vigilanceVaccinesPneumovaxComment = event.target.formGridVigilanceVaccinesPneumovaxComment.value;\n  const vigilanceVaccinesOtherName = event.target.formGridVigilanceVaccinesOtherName.value;\n  const vigilanceVaccinesOtherMedication = event.target.formGridVigilanceVaccinesOtherMedication.checked;\n  const vigilanceVaccinesOtherTesting = event.target.formGridVigilanceVaccinesOtherTesting.checked;\n  const vigilanceVaccinesOtherComment = event.target.formGridVigilanceVaccinesOtherComment.value;\n  const requestBody = {\n    query:`\n      mutation {updatePatientVigilance(userId:\"${userId}\", patientId:\"${selectedPatientId}\",patientInput:{\n        vigilanceDate:\"${vigilanceDate}\",\n        vigilanceChronicIllnessDiabetesMedication: ${vigilanceChronicIllnessDiabetesMedication},\n        vigilanceChronicIllnessDiabetesTesting: ${vigilanceChronicIllnessDiabetesTesting},\n        vigilanceChronicIllnessDiabetesComment: \"${vigilanceChronicIllnessDiabetesComment}\",\n        vigilanceChronicIllnessHbpMedication: ${vigilanceChronicIllnessHbpMedication},\n        vigilanceChronicIllnessHbpTesting: ${vigilanceChronicIllnessHbpTesting},\n        vigilanceChronicIllnessHbpComment: \"${vigilanceChronicIllnessHbpComment}\",\n        vigilanceChronicIllnessDyslipidemiaMedication: ${vigilanceChronicIllnessDyslipidemiaMedication},\n        vigilanceChronicIllnessDyslipidemiaTesting: ${vigilanceChronicIllnessDyslipidemiaTesting},\n        vigilanceChronicIllnessDyslipidemiaComment: \"${vigilanceChronicIllnessDyslipidemiaComment}\",\n        vigilanceChronicIllnessCadMedication: ${vigilanceChronicIllnessCadMedication},\n        vigilanceChronicIllnessCadTesting: ${vigilanceChronicIllnessCadTesting},\n        vigilanceChronicIllnessCadComment: \"${vigilanceChronicIllnessCadComment}\",\n        vigilanceLifestyleWeightMedication: ${vigilanceLifestyleWeightMedication},\n        vigilanceLifestyleWeightTesting: ${vigilanceLifestyleWeightTesting},\n        vigilanceLifestyleWeightComment: \"${vigilanceLifestyleWeightComment}\",\n        vigilanceLifestyleDietMedication: ${vigilanceLifestyleDietMedication},\n        vigilanceLifestyleDietTesting: ${vigilanceLifestyleDietTesting},\n        vigilanceLifestyleDietComment: \"${vigilanceLifestyleDietComment}\",\n        vigilanceLifestyleSmokingMedication: ${vigilanceLifestyleSmokingMedication},\n        vigilanceLifestyleSmokingTesting: ${vigilanceLifestyleSmokingTesting},\n        vigilanceLifestyleSmokingComment: \"${vigilanceLifestyleSmokingComment}\",\n        vigilanceLifestyleSubstanceAbuseMedication: ${vigilanceLifestyleSubstanceAbuseMedication},\n        vigilanceLifestyleSubstanceAbuseTesting: ${vigilanceLifestyleSubstanceAbuseTesting},\n        vigilanceLifestyleSubstanceAbuseComment: \"${vigilanceLifestyleSubstanceAbuseComment}\",\n        vigilanceLifestyleExerciseMedication: ${vigilanceLifestyleExerciseMedication},\n        vigilanceLifestyleExerciseTesting: ${vigilanceLifestyleExerciseTesting},\n        vigilanceLifestyleExerciseComment: \"${vigilanceLifestyleExerciseComment}\",\n        vigilanceLifestyleAllergiesMedication: ${vigilanceLifestyleAllergiesMedication},\n        vigilanceLifestyleAllergiesTesting: ${vigilanceLifestyleAllergiesTesting},\n        vigilanceLifestyleAllergiesComment: \"${vigilanceLifestyleAllergiesComment}\",\n        vigilanceLifestyleAsthmaMedication: ${vigilanceLifestyleAsthmaMedication},\n        vigilanceLifestyleAsthmaTesting: ${vigilanceLifestyleAsthmaTesting},\n        vigilanceLifestyleAsthmaComment: \"${vigilanceLifestyleAsthmaComment}\",\n        vigilanceScreeningBreastMedication: ${vigilanceScreeningBreastMedication},\n        vigilanceScreeningBreastTesting: ${vigilanceScreeningBreastTesting},\n        vigilanceScreeningBreastComment: \"${vigilanceScreeningBreastComment}\",\n        vigilanceScreeningProstateMedication: ${vigilanceScreeningProstateMedication},\n        vigilanceScreeningProstateTesting: ${vigilanceScreeningProstateTesting},\n        vigilanceScreeningProstateComment: \"${vigilanceScreeningProstateComment}\",\n        vigilanceScreeningCervixMedication: ${vigilanceScreeningCervixMedication},\n        vigilanceScreeningCervixTesting: ${vigilanceScreeningCervixTesting},\n        vigilanceScreeningCervixComment: \"${vigilanceScreeningCervixComment}\",\n        vigilanceScreeningColonMedication: ${vigilanceScreeningColonMedication},\n        vigilanceScreeningColonTesting: ${vigilanceScreeningColonTesting},\n        vigilanceScreeningColonComment: \"${vigilanceScreeningColonComment}\",\n        vigilanceScreeningDentalMedication: ${vigilanceScreeningDentalMedication},\n        vigilanceScreeningDentalTesting: ${vigilanceScreeningDentalTesting},\n        vigilanceScreeningDentalComment: \"${vigilanceScreeningDentalComment}\",\n        vigilanceVaccinesInfluenzaMedication: ${vigilanceVaccinesInfluenzaMedication},\n        vigilanceVaccinesInfluenzaTesting: ${vigilanceVaccinesInfluenzaTesting},\n        vigilanceVaccinesInfluenzaComment: \"${vigilanceVaccinesInfluenzaComment}\",\n        vigilanceVaccinesVaricellaMedication: ${vigilanceVaccinesVaricellaMedication},\n        vigilanceVaccinesVaricellaTesting: ${vigilanceVaccinesVaricellaTesting},\n        vigilanceVaccinesVaricellaComment: \"${vigilanceVaccinesVaricellaComment}\",\n        vigilanceVaccinesHpvMedication: ${vigilanceVaccinesHpvMedication},\n        vigilanceVaccinesHpvTesting: ${vigilanceVaccinesHpvTesting},\n        vigilanceVaccinesHpvComment: \"${vigilanceVaccinesHpvComment}\",\n        vigilanceVaccinesMmrMedication: ${vigilanceVaccinesMmrMedication},\n        vigilanceVaccinesMmrTesting: ${vigilanceVaccinesMmrTesting},\n        vigilanceVaccinesMmrComment: \"${vigilanceVaccinesMmrComment}\",\n        vigilanceVaccinesTetanusMedication: ${vigilanceVaccinesTetanusMedication},\n        vigilanceVaccinesTetanusTesting: ${vigilanceVaccinesTetanusTesting},\n        vigilanceVaccinesTetanusComment: \"${vigilanceVaccinesTetanusComment}\",\n        vigilanceVaccinesPneumovaxMedication: ${vigilanceVaccinesPneumovaxMedication},\n        vigilanceVaccinesPneumovaxTesting: ${vigilanceVaccinesPneumovaxTesting},\n        vigilanceVaccinesPneumovaxComment: \"${vigilanceVaccinesPneumovaxComment}\",\n        vigilanceVaccinesOtherName: \"${vigilanceVaccinesOtherName}\",\n        vigilanceVaccinesOtherMedication: ${vigilanceVaccinesOtherMedication},\n        vigilanceVaccinesOtherTesting: ${vigilanceVaccinesOtherTesting},\n        vigilanceVaccinesOtherComment: \"${vigilanceVaccinesOtherComment}\"})\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n    }\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedPatientId = resData.data.updatePatientVigilance._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientVigilance);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.fetchPatients();\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientVigilance })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n}\n\nupdatePatientAttachmentHandler = (event) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const selectedPatientId = this.context.selectedPatient._id;\n    this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Attachment...\" });\n    const attachmentFormat = event.target.formGridPatientAttachmentFormat.value;\n    const attachmentPath = \"uploads/patients/\"+selectedPatientId+\"/attachments\"\n    const file = AuthContext._currentValue.file;\n    const config = {\n      bucketName: this.context.creds.s3.bucketName,\n      dirName: attachmentPath,\n      region: this.context.creds.s3.region,\n      accessKeyId: this.context.creds.s3.accessKeyId,\n      secretAccessKey: this.context.creds.s3.secretAccessKey,\n    }\n    const ReactS3Client = new S3(config);\n    const newFileName = file.name;\n    const attachmentName = newFileName;\n    this.setState({userAlert: \"uploading attachment ...\"});\n\n    ReactS3Client\n        .uploadFile(file, newFileName)\n        .then(data => {console.log(data);this.setState({userAlert: \"attachment upload success!\"});})\n        .catch(err => {console.error(err);this.setState({userAlert: \"upload error:  \"+err});})\n\n    if (\n      attachmentName.trim().length === 0 ||\n      attachmentFormat.trim().length === 0 ||\n      attachmentPath.trim().length === 0\n    ) {\n      this.setState({userAlert: \"blank fields detected!!!...Please try again...\"});\n      return;\n    }\n\n    const requestBody = {\n          query:`\n            mutation {updatePatientAttachment(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{attachmentName:\"${attachmentName}\",attachmentFormat:\"${attachmentFormat}\",attachmentPath:\"${attachmentPath}\"})\n            {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},attachments{name,format,path},notes,tags}}\n          `}\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientAttachment._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientAttachment);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientAttachment })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nupdatePatientNoteHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Note ...\" });\n\n  const note = event.target.formGridNote.value;\n\n  if (\n    note.trim().length === 0\n  ) {\n    this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n    return;\n  }\n\n  const requestBody = {\n        query:`\n          mutation {updatePatientNotes(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{notes:\"${note}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `}\n\n  fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const updatedPatientId = resData.data.updatePatientNotes._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.updatePatientNotes);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n\n        this.fetchPatients();\n        this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientNotes })\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n      });\n\n}\nupdatePatientTagHandler = (event) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const selectedPatientId = this.context.selectedPatient._id;\n  this.setState({ updating: false , patientUpdateField: null, userAlert: \"Adding selected Patient Tag...\" });\n  const tag = event.target.formGridTag.value;\n\n  if (\n    tag.trim().length === 0\n  ) {\n    console.log(\"Can't Submit a blank form!!!...Please try again...\");\n    this.setState({userAlert: \"Can't Submit a blank form!!!...Please try again...\"});\n    return;\n  }\n\n  const requestBody = {\n        query:`\n          mutation {updatePatientTags(userId:\"${userId}\",patientId:\"${selectedPatientId}\",patientInput:{tag:\"${tag}\"})\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `}\n\n  fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const updatedPatientId = resData.data.updatePatientTags._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.updatePatientTags);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.fetchPatients();\n      this.setState({ userAlert: responseAlert, selectedPatient: resData.data.updatePatientTags })\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\n\nmodalConfirmSearchHandler = (event) => {\n\n  const userId = this.context.userId;\n  const token = this.context.token;\n  this.setState({ searching: false, userAlert: \"Now Searching Patients...\" });\n  let field = null;\n  const query = event.target.formBasicQuery.value;\n  if (event.target.formBasicFieldSelect.value === \"select\") {\n    field = event.target.formBasicField.value;\n  } else {\n    field = event.target.formBasicFieldSelect.value;\n  }\n  this.setState({\n    patientSearchField: field,\n    patientSearchQuery: query,\n  })\n  if (\n    field.trim().length === 0 ||\n    query.trim().length === 0\n  ) {\n    this.setState({ userAlert: \"blank fields detected!!!...Please try again...\"});\n    return;\n  }\n\n  const requestBody = {\n    query: `\n      query {\n        getPatientField(userId: \"${userId}\", field: \"${field}\", query: \"${query}\" )\n        {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `\n    }\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const responseAlert = JSON.stringify(resData.data).slice(2,15);\n      const searchPatients = resData.data.getPatientField;\n      this.setState({ searchPatients: searchPatients, userAlert: responseAlert})\n      // this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nmodalConfirmSearchIdHandler = (event) => {\n\n  const userId = this.context.userId;\n  this.setState({ searching: false, userAlert: \"Searching Patients by Id...\" });\n  const patientId = event.target.formBasicId.value;\n\n  const requestBody = {\n    query: `\n      query {getPatientId(userId:\"${userId}\",patientId:\"${patientId}\")\n      {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `}\n\n  const token = this.context.token;\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      const searchPatients = resData.data.getPatientId;\n      this.setState({ searchPatients: [searchPatients], userAlert: responseAlert})\n      console.log(\"state.searchPatients:  \", this.state.searchPatients);\n      // this.fetchUsers();\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\nmodalConfirmSearchNameHandler = (event) => {\n\n  this.setState({ searching: false, userAlert: \"Searching Patients by Name...\" });\n  const patients = this.state.patients;\n  const regex = new RegExp(event.target.formBasicName.value,\"i\");\n    let result = patients.filter(patient => patient.name.match(regex));\n    this.setState({ searchPatients: result})\n}\n\ngetPatientVisit = (event) => {\n\n    const selectedPatient = this.state.selectedPatient;\n    event.preventDefault();\n    let visitDate = new Date(event.target.formBasicVisitDate.value).toISOString().substring(0, 10);\n    let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n    let visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    let visitVigilance = selectedPatient.vigilance.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n      const visit = {\n        date: visitDate,\n        patientName: this.context.selectedPatient.name,\n        consultant: visitConsultants,\n        complaint: visitComplaints,\n        examination: visitExaminations,\n        survey: visitSurveys,\n        systematicInquiry: visitSystematicInquiry,\n        vitals: visitVitals,\n        history: visitHistory,\n        investigation: visitInvestigations,\n        diagnosis: visitDiagnosis,\n        treatment: visitTreatments,\n        billing: visitBilling,\n        vigilance: visitVigilance,\n      };\n    this.setState({visit: visit});\n  }\n\n  getVisitList = () => {\n\n    const selectedPatient = this.state.selectedPatient;\n    const patientName = this.state.selectedPatient.name;\n    let selectedPatientAppointmentDateArray = [];\n    let selectedPatientAppointmentVisitArray = [];\n    let selectedPatientAppointments = this.state.selectedPatient.appointments.map(appointments => {\n      selectedPatientAppointmentDateArray.push(new Date(appointments.date.substr(0,10)*1000).toISOString().substring(0, 10))\n    })\n\n      selectedPatientAppointmentDateArray.map(appointmentDate => {\n          thisGetVisit(appointmentDate, patientName)\n      })\n      function thisGetVisit (argsDate, argsPatientName) {\n\n        const visitDate = argsDate\n        const visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitConsultants = selectedPatient.consultant.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitComplaints = selectedPatient.complaints.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        // let visitSurveys = selectedPatient.surveys.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString() === visitDate);\n        const visitVitals = selectedPatient.vitals.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitSystematicInquiry = selectedPatient.systematicInquiry.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitExaminations = selectedPatient.examination.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitHistory = selectedPatient.history.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitInvestigations = selectedPatient.investigation.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitDiagnosis = selectedPatient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitTreatments = selectedPatient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitBilling = selectedPatient.billing.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n        const visitVigilance = selectedPatient.vigilance.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n\n        const visit = {\n          date: visitDate,\n          patientName: argsPatientName,\n          consultant: visitConsultants,\n          complaint: visitComplaints,\n          examination: visitExaminations,\n          survey: visitSurveys,\n          systematicInquiry: visitSystematicInquiry,\n          vitals: visitVitals,\n          history: visitHistory,\n          investigation: visitInvestigations,\n          diagnosis: visitDiagnosis,\n          treatment: visitTreatments,\n          billing: visitBilling,\n          vigilance: visitVigilance,\n        };\n        selectedPatientAppointmentVisitArray.push(visit)\n      }\n    this.setState({ visitList: selectedPatientAppointmentVisitArray})\n}\n\n\ngetVisitListAsc = () => {\n    let list = this.state.visitList;\n    list.sort((a, b) => {\n      if (a.date < b.date) return -1\n      return a.date > b.date ? 1 : 0\n    })\n    this.setState({visitList: list})\n}\n\ngetVisitListDesc = () => {\n    let list = this.state.visitList;\n    list.sort((a, b) => {\n      if (a.date < b.date) return 1\n      return a.date > b.date ? -1 : 0\n    })\n    this.setState({visitList: list})\n}\n\n\n  modalCancelHandler = () => {\n    this.setState({ creating: false, updating: false, searching: false, selectedPatient: null });\n  };\n\n\n  fetchPatients() {\n\n    const userId = this.context.userId;\n    const token = this.context.token;\n    this.setState({ isLoading: true, userAlert: \"Fetching Patient Master List...\" });\n    const requestBody = {\n      query: `\n          query {patients(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n      };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n        this.context.patients = this.state.patients;\n        if (this.isActive) {\n          this.setState({\n            patients: patients,\n            isLoading: false,\n          });\n        }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        if (this.isActive) {\n          this.setState({ isLoading: false });\n        }\n    });\n  }\n\n  fetchPatientsAsc = () => {\n    const userId = this.context.userId;\n    const token = this.context.token;\n\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameAsc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patientsNameAsc;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n        this.context.patients = patients;\n        this.setState({ patients: patients});\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n  fetchPatientsDesc = () => {\n    const userId = this.context.userId;\n    const token = this.context.token;\n    // this.setState({ isLoading: true });\n    const requestBody = {\n      query: `\n          query {patientsNameDesc(userId:\"${userId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const patients = resData.data.patientsNameDesc;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({userAlert: responseAlert});\n        this.context.patients = patients\n        // if (this.isActive) {\n        //   this.setState({ patients: patients, isLoading: false });\n        // }\n        this.setState({ patients: patients});\n      })\n      .catch(err => {\n        this.setState({userAlert: err});\n        // if (this.isActive) {\n        //   this.setState({ isLoading: false });\n        // }\n      });\n  }\n\n\n  modalDeleteHandler = () => {\n\n    const selectedPatientId = this.context.selectedPatient._id;\n    const userId = this.context.selectedUser._id;\n    if(this.context.user.role !== 'admin') {\n      this.setState({ userAlert: \"Not the Admin! No edit permission!!\"});\n    }\n    this.setState({deleting: true, userAlert: \"Deleting selected Patient...\"});\n    const requestBody = {\n      query: `\n          mutation {deletePatient(userId:\"${userId}\",patientId:\"${selectedPatientId}\")\n          {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n        `\n    };\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + this.context.token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedPatient = resData.data.deletePatient;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({userAlert: responseAlert});\n      let deletedPatientId = deletedPatient._id;\n      deletedPatient = this.state.patients.find(e => e._id === deletedPatientId);\n      const deletedPatientPos = this.state.patients.indexOf(deletedPatient);\n      const slicedArray = this.state.patients.splice(deletedPatientPos, 1);\n      this.setState({ deleting: false });\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n      if (this.isActive) {\n        this.setState({ deleting: false });\n      }\n    });\n  }\n\n  deletePatientInsuranceItem = (props) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const patientId = this.state.selectedPatient._id;\n\n    const requestBody = {\n      query: `\n       mutation {deletePatientInsurance (userId:\"${userId}\", patientId:\"${patientId}\",insuranceCompany:\"${props.company}\",insuranceNumber:\"${props.number}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedPatient = resData.data.deletePatientInsurance;\n      const updatedPatientId = resData.data.deletePatientInsurance._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientInsurance);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({ userAlert: err});\n    });\n  }\n\n  deletePatientAppointmentItem = (props) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const patientId = this.state.selectedPatient._id;\n    const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const requestBody = {\n        query: `\n         mutation {deletePatientAppointment (userId:\"${userId}\", patientId:\"${patientId}\",appointmentId:\"${props._id}\",appointmentDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatientAppointment;\n        const updatedPatientId = resData.data.deletePatientAppointment._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientAppointment);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        this.setState({ userAlert: err});\n      });\n}\n\n  deletePatientConsultantItem = (props) => {\n\n    const token = this.context.token;\n    const userId = this.context.userId;\n    const patientId = this.state.selectedPatient._id;\n    const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n      const requestBody = {\n        query: `\n         mutation {deletePatientConsultant (userId:\"${userId}\", patientId:\"${patientId}\",consultantId:\"${props.reference.id}\",consultantDate:\"${date}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n      `};\n\n      fetch('http://localhost:10000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + token\n        }\n      })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        const deletedPatient = resData.data.deletePatientConsultant;\n        const updatedPatientId = resData.data.deletePatientConsultant._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientConsultant);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        this.setState({ userAlert: err});\n      });\n}\n\ndeletePatientNextOfKinItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const requestBody = {\n      query: `\n       mutation {deletePatientNextOfKin (userId:\"${userId}\", patientId:\"${patientId}\",nextOfKinName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedPatient = resData.data.deletePatientNextOfKin;\n      const updatedPatientId = resData.data.deletePatientNextOfKin._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientNextOfKin);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientComplaintItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n      query: `\n       mutation {deletePatientComplaint (userId:\"${userId}\", patientId:\"${patientId}\",complaintTitle:\"${props.title}\",complaintDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientComplaint;\n      const updatedPatientId = resData.data.deletePatientComplaint._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientComplaint);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientSurveyItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n      query: `\n       mutation {deletePatientSurvey (userId:\"${userId}\", patientId:\"${patientId}\",surveyTitle:\"${props.title}\",surveyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedPatient = resData.data.deletePatientSurvey;\n      const updatedPatientId = resData.data.deletePatientSurvey._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientSurvey);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientSystematicInquiryItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const requestBody = {\n      query: `\n       mutation {deletePatientSystematicInquiry (userId:\"${userId}\", patientId:\"${patientId}\",systematicInquiryTitle:\"${props.title}\",systematicInquiryDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      let deletedPatient = resData.data.deletePatientSystematicInquiry;\n      const updatedPatientId = resData.data.deletePatientSystematicInquiry._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientSystematicInquiry);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientVitalsItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const requestBody = {\n      query: `\n       mutation {deletePatientVitals (userId:\"${userId}\", patientId:\"${patientId}\",vitalsDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        let deletedPatient = resData.data.deletePatientVitals;\n        const updatedPatientId = resData.data.deletePatientVitals._id;\n        const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n        const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n        const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n        this.state.patients.push(resData.data.deletePatientVitals);\n        this.context.patients = this.state.patients;\n        const responseAlert = JSON.stringify(resData.data).slice(2,25);\n        this.setState({ userAlert: responseAlert})\n        this.fetchPatients();\n      })\n      .catch(err => {\n        this.setState({userAlert: err})\n      });\n}\n\ndeletePatientExaminationItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const requestBody = {\n      query: `\n       mutation {deletePatientExamination (userId:\"${userId}\", patientId:\"${patientId}\",examinationType:\"${props.type}\",examinationDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientExamination;\n            const updatedPatientId = resData.data.deletePatientExamination._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            this.state.patients.push(resData.data.deletePatientExamination);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            this.setState({userAlert: err})\n          });\n}\n\ndeletePatientHistoryItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n    const requestBody = {\n      query: `\n       mutation {deletePatientHistory (userId:\"${userId}\", patientId:\"${patientId}\",historyTitle:\"${props.title}\",historyDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientHistory;\n            const updatedPatientId = resData.data.deletePatientHistory._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            this.state.patients.push(resData.data.deletePatientHistory);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            this.setState({userAlert: err})\n          });\n}\n\ndeletePatientAllergiesItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n    const requestBody = {\n      query: `\n       mutation {deletePatientAllergies (userId:\"${userId}\", patientId:\"${patientId}\",allergiesTitle:\"${props.title}\",allergiesType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientAllergies;\n            const updatedPatientId = resData.data.deletePatientAllergies._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            this.state.patients.push(resData.data.deletePatientAllergies);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert})\n            this.fetchPatients();\n          })\n          .catch(err => {\n            this.setState({userAlert: err})\n          });\n}\n\ndeletePatientMedicationItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n    const requestBody = {\n      query: `\n       mutation {deletePatientMedication (userId:\"${userId}\", patientId:\"${patientId}\",medicationTitle:\"${props.title}\",medicationType:\"${props.type}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n        fetch('http://localhost:10000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(requestBody),\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + token\n          }\n        })\n          .then(res => {\n            if (res.status !== 200 && res.status !== 201) {\n              throw new Error('Failed!');\n            }\n            return res.json();\n          })\n          .then(resData => {\n            let deletedPatient = resData.data.deletePatientMedication;\n            const updatedPatientId = resData.data.deletePatientMedication._id;\n            const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n            const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n            const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n            this.state.patients.push(resData.data.deletePatientMedication);\n            this.context.patients = this.state.patients;\n            const responseAlert = JSON.stringify(resData.data).slice(2,25);\n            this.setState({ userAlert: responseAlert});\n            this.fetchPatients();\n          })\n          .catch(err => {\n            this.setState({userAlert: err})\n          });\n}\n\ndeletePatientInvestigationItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n      query: `\n         mutation {deletePatientInvestigation (userId:\"${userId}\", patientId:\"${patientId}\",investigationDate:\"${date}\",investigationTitle:\"${props.title}\")\n         {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientInvestigation;\n      const updatedPatientId = resData.data.deletePatientInvestigation._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientInvestigation);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert})\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientDiagnosisItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n    query: `\n       mutation {deletePatientDiagnosis (userId:\"${userId}\",patientId:\"${patientId}\",diagnosisDate:\"${date}\",diagnosisTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n       `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientDiagnosis;\n      const updatedPatientId = resData.data.deletePatientDiagnosis._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientDiagnosis);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert});\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientTreatmentItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n  query: `\n     mutation {deletePatientTreatment (userId:\"${userId}\", patientId:\"${patientId}\",treatmentDate:\"${date}\",treatmentTitle:\"${props.title}\")\n     {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientTreatment;\n      const updatedPatientId = resData.data.deletePatientTreatment._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientTreatment);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert});\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err});\n    });\n}\n\ndeletePatientBillingItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n      query:`\n       mutation {deletePatientBilling (userId:\"${userId}\", patientId:\"${patientId}\",billingDate:\"${date}\",billingTitle:\"${props.title}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientBilling;\n      const updatedPatientId = resData.data.deletePatientBilling._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientBilling);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert});\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientVigilanceItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const date = new Date(props.date.substr(0,10)*1000).toISOString().slice(0,10);\n  const requestBody = {\n    query:`\n       mutation {deletePatientVigilance (userId:\"${userId}\", patientId:\"${patientId}\",vigilanceDate:\"${date}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n     `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientVigilance;\n      const updatedPatientId = resData.data.deletePatientVigilance._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientVigilance);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert});\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientAttachmentItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  //   const config = {\n  //     bucketName: this.context.creds.s3.bucketName,\n  //     dirName: props.path,\n  //     region: this.context.creds.s3.region,\n  //     accessKeyId: this.context.creds.s3.accessKeyId,\n  //     secretAccessKey: this.context.creds.s3.secretAccessKey,\n  //   }\n  // const ReactS3Client = new S3(config);\n  // const filename = props.name;\n  // // const attachmentName = newFileName;\n  // //\n  // S3FileUpload\n  // .deleteFile(filename, config)\n  // .then(response => console.log(response))\n  // .catch(err => console.error(err))\n\n    const requestBody = {\n      query:`\n       mutation {deletePatientAttachment (userId:\"${userId}\", patientId:\"${patientId}\",attachmentName:\"${props.name}\")\n       {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n    `};\n\n    fetch('http://localhost:10000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n      return res.json();\n    })\n    .then(resData => {\n      const deletedPatient = resData.data.deletePatientAttachment;\n      const updatedPatientId = resData.data.deletePatientAttachment._id;\n      const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n      const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n      const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n      this.state.patients.push(resData.data.deletePatientAttachment);\n      this.context.patients = this.state.patients;\n      const responseAlert = JSON.stringify(resData.data).slice(2,25);\n      this.setState({ userAlert: responseAlert});\n      this.fetchPatients();\n    })\n    .catch(err => {\n      this.setState({userAlert: err})\n    });\n}\n\ndeletePatientNoteItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const requestBody = {\n    query:`\n    mutation {deletePatientNote (userId:\"${userId}\", patientId:\"${patientId}\",note:\"${props}\")\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n  .then(res => {\n    if (res.status !== 200 && res.status !== 201) {\n      throw new Error('Failed!');\n    }\n    return res.json();\n  })\n  .then(resData => {\n    let deletedPatient = resData.data.deletePatientNote;\n    const updatedPatientId = resData.data.deletePatientNote._id;\n    const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n    const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n    const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n    this.state.patients.push(resData.data.deletePatientNote);\n    this.context.patients = this.state.patients;\n    const responseAlert = JSON.stringify(resData.data).slice(2,25);\n    this.setState({ userAlert: responseAlert});\n    this.fetchPatients();\n  })\n  .catch(err => {\n    this.setState({userAlert: err})\n  });\n}\n\ndeletePatientTagItem = (props) => {\n\n  const token = this.context.token;\n  const userId = this.context.userId;\n  const patientId = this.state.selectedPatient._id;\n  const requestBody = {\n    query:`\n    mutation {deletePatientTag (userId:\"${userId}\", patientId:\"${patientId}\",tag:\"${props}\")\n    {_id,title,name,dob,age,gender,address{number,street,town,parish,postOffice},registrationDate,referralDate,expirationDate,attendingPhysician{name,email,phone},referringDoctor{name,email,phone},contact{phone,email},occupation{role,employer,contact{phone,email}},appointments{title,time,date,location},consultant{date,reference{name,role}},insurance{company,number,description,expiry,subscriber{company,description}},nextOfKin{name,contact{phone,email}},complaints{date,title,description,anamnesis,attachment{name,format,path}},surveys{date,title,description,attachment{name,format,path}},systematicInquiry{date,title,description,attachment{name,format,path}},vitals{date,pr,bp1,bp2,rr,temp,ps02,height,weight,bmi,urine{type,value}},examination{date,general,area,type,measure,value,description,followUp,attachment{name,format,path}},history{type,date,title,description,attachment{name,format,path}},allergies{type,title,description,attachment{name,format,path}},medication{title,type,description,attachment{name,format,path}},investigation{date,type,title,description,attachment{name,format,path}},diagnosis{date,type,title,description,attachment{name,format,path}},treatment{date,type,title,description,dose,frequency,attachment{name,format,path}},billing{date,title,type,description,amount,paid,attachment{name,format,path},notes},vigilance{date,chronicIllness{diabetes{medication,testing,comment},hbp{medication,testing,comment},dyslipidemia{medication,testing,comment},cad{medication,testing,comment}},lifestyle{weight{medication,testing,comment},diet{medication,testing,comment},smoking{medication,testing,comment},substanceAbuse{medication,testing,comment},exercise{medication,testing,comment},allergies{medication,testing,comment},asthma{medication,testing,comment}},screening{breast{medication,testing,comment},prostate{medication,testing,comment},cervix{medication,testing,comment},colon{medication,testing,comment},dental{medication,testing,comment}},vaccines{influenza{medication,testing,comment},varicella{medication,testing,comment},hpv{medication,testing,comment},mmr{medication,testing,comment},tetanus{medication,testing,comment},pneumovax{medication,testing,comment},other{name,medication,testing,comment}}},attachments{name,format,path},notes,tags}}\n  `};\n\n  fetch('http://localhost:10000/graphql', {\n    method: 'POST',\n    body: JSON.stringify(requestBody),\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token\n    }\n  })\n  .then(res => {\n    if (res.status !== 200 && res.status !== 201) {\n      throw new Error('Failed!');\n    }\n    return res.json();\n  })\n  .then(resData => {\n    let deletedPatient = resData.data.deletePatientTag;\n    const updatedPatientId = resData.data.deletePatientTag._id;\n    const updatedPatient = this.state.patients.find(e => e._id === updatedPatientId);\n    const updatedPatientPos = this.state.patients.indexOf(updatedPatient);\n    const slicedArray = this.state.patients.splice(updatedPatientPos, 1);\n    this.state.patients.push(resData.data.deletePatientTag);\n    this.context.patients = this.state.patients;\n    const responseAlert = JSON.stringify(resData.data).slice(2,25);\n    this.setState({ userAlert: responseAlert});\n    this.fetchPatients();\n  })\n  .catch(err => {\n    this.setState({ userAlert: err})\n  });\n}\n\n\nupdatePatientSpecial (event) {\n  const field = event.target.value;\n  this.setState({ patientUpdateField: field});\n}\n\nonViewAttachment = (attachment) => {\n    this.setState({showAttachment: true})\n    const file = \"https://ent-emr-bucket.s3-us-east-2.amazonaws.com/\"+attachment.path+\"/\"+attachment.name;\n    const type = attachment.format;\n    this.setState({showThisAttachmentFile: file, showThisAttachmentType: type})\n}\n\ncloseAttachmentView = () => {\n    this.setState({showAttachment: false})\n}\n\ncreatePdf = (patient, args) => {\n    const pdfData = {\n    title: \"This pdf is supplied with Patient data...\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      }\n    }\n  this.setState({creatingDocument: true, pdfType: \"test\", pdfData: pdfData})\n}\n\ncreatePdfTest = (event) => {\n  event.preventDefault();\n  console.log(`\n      create pdf user otf input here...\n      ${event.target.formGridDocGenUserInput.value}\n      ${event.target.formGridDocGenVisitDate.value}\n    `);\n\n    const patient = this.state.selectedPatient;\n    const pdfData = {\n    title: \"This pdf is supplied with Patient data...\",\n    test: event.target.formGridDocGenUserInput.value,\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      }\n    }\n  this.setState({creatingDocument: true, pdfType: \"test\", pdfData: pdfData})\n}\n\ncreateReferral = (patient) => {\n  const pdfData = {\n    title: \"Patient Referral\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    referral: \"test referral...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"patientReferral\" })\n}\n\ncreateReferralInput = (event) => {\n  event.preventDefault();\n\n    const visitDate = new Date(event.target.formGridDocGenReferralVisitDate.value).toISOString().substring(0, 10);\n    const patient = this.state.selectedPatient;\n    const visitDiagnosis = patient.diagnosis.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    const visitTreatment = patient.treatment.filter(x=> new Date(x.date.substr(0,10)*1000).toISOString().substring(0, 10) === visitDate);\n    console.log(`\n        create referral user otf input here...\n        ${event.target.formGridDocGenReferralVisitDate.value},\n        ${event.target.formGridDocGenReferralRecommendation.value},\n        ${event.target.formGridDocGenReferralFindings.value},\n        visitDiagnosis: ${JSON.stringify(visitDiagnosis)},\n      `);\n\n    const pdfData = {\n    title: \"This pdf is supplied with Patient data...\",\n    visitDate: visitDate,\n    findings: event.target.formGridDocGenReferralFindings.value,\n    recommendation: event.target.formGridDocGenReferralRecommendation.value,\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      referral: \"test referral... now w/ input\",\n      visitDiagnosis: visitDiagnosis,\n      visitTreatment: visitTreatment,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"patientReferral\" })\n}\n\ncreateOperationReminder = (patient) => {\n  const pdfData = {\n    title: \"Operation Reminder\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    referral: \"test reminder...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"operationReminder\" })\n}\n\ncreateOperationReminderInput = (event) => {\n  event.preventDefault();\n\n    const patient = this.state.selectedPatient;\n    console.log(`\n        create operation reminder user otf input here...\n      `);\n\n    const pdfData = {\n    title: \"This pdf is supplied with Patient data...\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.address.number,\n        street: patient.address.street,\n        town: patient.address.town,\n        parish: patient.address.parish,\n        postOffice: patient.address.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      date: event.target.formGridDocGenOperationReminderDate.value,\n      name: event.target.formGridDocGenOperationReminderName.value,\n      time: event.target.formGridDocGenOperationReminderTime.value,\n      hospitalName: event.target.formGridDocGenOperationReminderHospitalName.value,\n      hospitalAddress: event.target.formGridDocGenOperationReminderHopsitalAddress.value,\n      fastDate: event.target.formGridDocGenOperationReminderFastDate.value,\n      fastTime: event.target.formGridDocGenOperationReminderFastTime.value,\n      estimateCost: event.target.formGridDocGenOperationReminderEstimateCost.value,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"operationReminder\" })\n}\n\ncreateMiscNote = (patient) => {\n  const pdfData = {\n    title: \"Misc Note\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    referral: \"test note...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"miscNote\" })\n}\n\ncreateMiscNoteInput = (event) => {\n  event.preventDefault();\n\n    const patient = this.state.selectedPatient;\n    console.log(`\n        create misc note user otf input here...\n      `);\n\n    const pdfData = {\n    title: \"This pdf is supplied with Patient data...\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.address.number,\n        street: patient.address.street,\n        town: patient.address.town,\n        parish: patient.address.parish,\n        postOffice: patient.address.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      note1: event.target.formGridDocGenMiscNote1.value,\n      note2: event.target.formGridDocGenMiscNote2.value,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"miscNote\" })\n}\n\ncreateSickNote = (patient) => {\n  const pdfData = {\n    title: \"Sick Note\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    referral: \"test sick note...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"sickNote\" })\n}\n\ncreateSickNoteInput = (event) => {\n  event.preventDefault();\n\n    const patient = this.state.selectedPatient;\n    console.log(`\n        create Sick note user otf input here...\n      `);\n\n    const pdfData = {\n    title: \"This pdf is supplied with Patient data...\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.address.number,\n        street: patient.address.street,\n        town: patient.address.town,\n        parish: patient.address.parish,\n        postOffice: patient.address.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      date: new Date(),\n      duration: event.target.formGridDocGenSickNoteDuration.value,\n      startDate: event.target.formGridDocGenSickNoteStartDate.value,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"sickNote\" })\n}\n\ncreateInsuranceNote = (patient) => {\n  const pdfData = {\n    title: \"Insurance Note\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    referral: \"test insurance note...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"insuranceNote\" })\n}\n\ncreateInsuranceNoteInput = (event) => {\n  event.preventDefault();\n\n    const patient = this.state.selectedPatient;\n    console.log(`\n        create Insurance note user otf input here...\n      `);\n\n    const pdfData = {\n    title: \"This pdf is supplied with Patient data...\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.address.number,\n        street: patient.address.street,\n        town: patient.address.town,\n        parish: patient.address.parish,\n        postOffice: patient.address.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      },\n      occupation:{\n        role: patient.occupation.role,\n        employer: patient.occupation.employer,\n        contact:{\n          phone: patient.occupation.contact.phone,\n          email: patient.occupation.contact.email\n        }},\n        appointments: patient.appointments,\n        consultant: patient.consultant,\n        insurance: patient.insurance,\n        nextOfKin: patient.nextOfKin,\n        complaints: patient.complaints,\n        surveys: patient.surveys,\n        systematicInquiry: patient.systematicInquiry,\n        vitals: patient.vitals,\n        examination: patient.examination,\n        history: patient.history,\n        allergies: patient.allergies,\n        medication: patient.medication,\n        investigation: patient.investigation,\n        diagnosis: patient.diagnosis,\n        treatment: patient.treatment,\n        billing: patient.billing,\n        vigilance: patient.vigilance,\n        attachments: patient.attachments,\n        notes: patient.notes,\n        tags: patient.tags\n      },\n      operation: event.target.formGridDocGenInsuranceNoteOperation.value,\n      operationDate: event.target.formGridDocGenInsuranceNoteOperationDate.value,\n      surgeonFee: event.target.formGridDocGenInsuranceNoteSurgeonFee.value,\n      assistantSurgeonFee: event.target.formGridDocGenInsuranceNoteAssistantSurgeonFee.value,\n      anesthetistsFee: event.target.formGridDocGenInsuranceNoteAnesthetistFee.value,\n      letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n    };\n\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"insuranceNote\" })\n}\n\ncreatePrescription = (patient) => {\n  const pdfData = {\n    title: \"Prescription\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    referral: \"test prescription...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"prescription\" })\n}\n\ncreateProcedureConsent = (patient) => {\n  const pdfData = {\n    title: \"Procedure Consent\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    referral: \"test procedure consent...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"procedureConsent\" })\n}\n\ncreateFitToFly = (patient) => {\n  const pdfData = {\n    title: \"Fit-to-Fly Authorization\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    referral: \"test fit-to-fly authorization...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"fitToFlyAuthorization\" })\n}\n\ncreateTreatmentInstruction = (patient) => {\n  const pdfData = {\n    title: \"Treatment Instruction\",\n    patient: {\n      _id: patient._id,\n      title: patient.title,\n      name: patient.name,\n      dob: patient.dob,\n      age: patient.age,\n      gender: patient.gender,\n      address:{\n        number: patient.number,\n        street: patient.street,\n        town: patient.town,\n        parish: patient.parish,\n        postOffice: patient.postOffice\n      },\n      registrationDate: patient.registrationDate,\n      referralDate: patient.referralDate,\n      expirationDate: patient.expirationDate,\n      attendingPhysician:{\n        name: patient.attendingPhysician.name,\n        email: patient.attendingPhysician.email,\n        phone: patient.attendingPhysician.phone\n      },\n      referringDoctor: {\n        name: patient.referringDoctor.name,\n        email: patient.referringDoctor.email,\n        phone: patient.referringDoctor.phone\n      },\n      contact: {\n        phone: patient.contact.phone,\n        email: patient.contact.email\n      }\n    },\n    referral: \"test Treatment Instruction...\",\n    letterheadImage: \"https://photos.app.goo.gl/SrVuahmr14khGBoM9\"\n  }\n  this.setState({ creatingDocument: true, pdfData: pdfData, pdfType: \"treatmentInstruction\" })\n}\n\nclosePdfCreator = () => {\n  this.setState({creatingDocument: false, pdfData: null, pdfType: null } )\n}\n\nshowDetailHandler = patientId => {\n  this.setState({ visitList: [] })\n  this.setState(prevState => {\n    const selectedPatient = prevState.patients.find(e => e._id === patientId);\n    this.context.selectedPatient = selectedPatient;\n    this.context.selectedPatientId = selectedPatient._id;\n    return { selectedPatient: selectedPatient };\n  });\n};\n\nselectVisit = (props) => {\n  this.setState({ selectedVisit: props })\n}\n\ncloseVisit = () => {\n  this.setState({\n    visit: null,\n    selectedVisit: null,\n  })\n}\n\ncreateVisitChecklistUpdate = (props) => {\n  this.setState({ userAlert: `creating visit: ${props} addedd...`})\n  let newState = Object.assign({}, this.state);\n  newState.createVisitChecklist[props] = true;\n  this.setState(newState);\n}\n\nnewVisitComplete = () => {\n  this.setState({\n      userAlert: \"New Visit creation complete...\",\n      newVisit: false,\n      createVisitChecklist: {\n        consultant: true,\n        complaint: true,\n        diagnosis: true,\n        examination: true,\n        investigation: true,\n        survey: true,\n        systematicInquiry: true,\n        treatment: true,\n        vitals: true,\n        billing: true,\n        vigilance: true\n      }\n  })\n}\n\nshowSidebar = () => {\n  console.log(`\n    showing sidebar...\n    `);\n    this.setState({\n      sidebarShow: true,\n      mCol2Size: 9\n    })\n}\n\nhideSidebar = () => {\n  console.log(`\n    hiding sidebar...\n    `);\n    this.setState({\n      sidebarShow: false,\n      mCol2Size: 11\n    })\n}\n\ncomponentWillUnmount() {\n  this.isActive = false;\n}\n\nrender() {\n    return (\n    <React.Fragment>\n    {this.state.showAttachment === true && (\n      <AttachmentViewer\n        onCloseAttachmentView={this.closeAttachmentView}\n        attachmentFile={this.state.showThisAttachmentFile}\n        attachmentType={this.state.showThisAttachmentType}\n      />\n    )}\n    {this.state.creatingDocument === true && (\n    <PdfCreator\n      pdfType={this.state.pdfType}\n      pdfData={this.state.pdfData}\n      onClosePdfCreator={this.closePdfCreator}\n    />\n    )}\n    <AlertBox\n      authUserId={this.context.userId}\n      alert={this.state.userAlert}\n    />\n    <SidebarControl\n      onShowSidebar={this.showSidebar}\n      onHideSidebar={this.hideSidebar}\n    />\n\n    <Accordion>\n    <Row>\n\n    {this.state.sidebarShow === true && (\n      <Col md={3} className=\"MasterCol1\">\n      <SidebarPage/>\n      </Col>\n    )}\n\n    <Col md={this.state.mCol2Size} className=\"MasterCol2\">\n    <Container className=\"containerCombinedDetail\">\n      <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"patientDetail\">\n        <Row>\n          <Col md={2} className=\"vertMenu\">\n            <Nav variant=\"pills\" className=\"flex-column\">\n              <Nav.Item>\n                <Nav.Link eventKey=\"MasterList\">MASTER LIST</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"disabled\" disabled>Search:</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"SearchInput\">Input</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"SearchResult\">Results</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientDetail\">Selected</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientCreate\">Create New</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"disabled\" disabled>Edit:</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditDemographics\">Demographics</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditField\">Single Field</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"disabled\" disabled>Add:</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientAddVisit\">Visit</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditConsultant\">Consultant</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditInsurance\">Insurance</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditNextOfKin\">Next of Kin</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditComplaint\">History</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditSurvey\">Survey</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditSystematicInquiry\">Systematic Inquiry</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditVitals\">Vitals</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditExamination\">Examination</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditHistory\">Past History</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditAllergies\">Allergies</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditMedication\">Medication</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditInvestigation\">Investigation</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditDiagnosis\">Diagnosis</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditTreatment\">Treatment</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditBilling\">Billing</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditVigilance\">Vigilance</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditAttachment\">Attachment</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditNote\">Note</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"patientEditTag\">Tag</Nav.Link>\n              </Nav.Item>\n\n            </Nav>\n          </Col>\n\n          <Col md={10}>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"patientDetail\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-danger\" size=\"lg\" className=\"confirmEditButton\">\n                      Don't forget to select someone from the Staff page before editing Patient Consultant information !!!\n                  </Button>\n                )}\n                {this.state.isLoading === false &&\n                  this.state.selectedPatient !== null && (\n                    <PatientDetail\n                    authUserId={this.context.userId}\n                    token={this.context.token}\n                    patient={this.state.selectedPatient}\n                    users={this.context.users}\n                    onEdit={this.startUpdatePatientHandler}\n                    canDelete={this.state.canDelete}\n                    onDelete={this.modalDeleteHandler}\n                    onGetVisit={this.getPatientVisit}\n                    visit={this.state.visit}\n                    selectedVisit={this.state.selectedVisit}\n                    fetchUsers={this.fetchUsers}\n                    appointmentDelete={this.deletePatientAppointmentItem}\n                    consultantDelete={this.deletePatientConsultantItem}\n                    insuranceDelete={this.deletePatientInsuranceItem}\n                    nextOfKinDelete={this.deletePatientNextOfKinItem}\n                    complaintDelete={this.deletePatientComplaintItem}\n                    surveyDelete={this.deletePatientSurveyItem}\n                    systematicInquiryDelete={this.deletePatientSystematicInquiryItem}\n                    vitalsDelete={this.deletePatientVitalsItem}\n                    examinationDelete={this.deletePatientExaminationItem}\n                    historyDelete={this.deletePatientHistoryItem}\n                    allergiesDelete={this.deletePatientAllergiesItem}\n                    medicationDelete={this.deletePatientMedicationItem}\n                    investigationDelete={this.deletePatientInvestigationItem}\n                    diagnosisDelete={this.deletePatientDiagnosisItem}\n                    treatmentDelete={this.deletePatientTreatmentItem}\n                    billingDelete={this.deletePatientBillingItem}\n                    vigilanceDelete={this.deletePatientVigilanceItem}\n                    attachmentDelete={this.deletePatientAttachmentItem}\n                    noteDelete={this.deletePatientNoteItem}\n                    tagDelete={this.deletePatientTagItem}\n                    onViewAttachment={this.onViewAttachment}\n                    onCreatePdf={this.createPdf}\n                    onCreatePdfTest={this.createPdfTest}\n                    onCreateReferral={this.createReferral}\n                    onCreateReferralInput={this.createReferralInput}\n                    onCreateOperationReminder={this.createOperationReminder}\n                    onCreateOperationReminderInput={this.createOperationReminderInput}\n                    onCreateMiscNote={this.createMiscNote}\n                    onCreateMiscNoteInput={this.createMiscNoteInput}\n                    onCreateSickNote={this.createSickNote}\n                    onCreateSickNoteInput={this.createSickNoteInput}\n                    onCreateInsuranceNote={this.createInsuranceNote}\n                    onCreateInsuranceNoteInput={this.createInsuranceNoteInput}\n                    onCreatePrescription={this.createPrescription}\n                    onCreateProcedureConsent={this.createProcedureConsent}\n                    onCreateFitToFly={this.createFitToFly}\n                    onCreateTreatmentInstruction={this.createTreatmentInstruction}\n                    onGetVisitList={this.getVisitList}\n                    visitList={this.state.visitList}\n                    onSelectVisit={this.selectVisit}\n                    onCloseVisit={this.closeVisit}\n                    onSortVisitListAsc={this.getVisitListAsc}\n                    onSortVisitListDesc={this.getVisitListDesc}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientCreate\">\n                <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreatePatientHandler} >Create NEW Patient Profile</Button>\n                {this.state.creating && (\n                  <CreatePatientForm\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmHandler}\n                    confirmText=\"Confirm\"\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientAddVisit\">\n              {this.state.selectedPatient === null && (\n                <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                  Select a Patient from the Master List\n                </Button>\n              )}\n              { this.state.selectedPatient !== null &&\n                this.state.newVisit !== true &&\n              (<Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startCreateVisitHandler} >Add NEW Visit</Button>\n              )}\n                {this.state.selectedPatient !== null &&\n                  this.state.newVisit === true && (\n                    <Accordion defaultActiveKey=\"0\">\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                            Guide:\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"0\">\n                          <Card.Body>\n                          <Card.Text>\n                            To create a NEW Patient Visit, fill in the forms below.\n                          </Card.Text>\n                          <Card.Text>\n                            Everytime you submit a form with new info, a new item is added to the current Patient visit.\n                          </Card.Text>\n                          <Card.Text>\n                            When you are done with a section click the GREEN Done adding Complaints, Vitals etc and continue to the next form.\n                          </Card.Text>\n                          <Card.Text>\n                            Once you have submitted all the information required scroll to the bottom and click the green button.\n                          </Card.Text>\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                            Consultant\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"1\">\n                          <Card.Body>\n                          Add Consultant form:\n                          {this.state.createVisitChecklist.consultant === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                              Consultant for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.consultant === false &&\n                          JSON.stringify(this.context.selectedUser) === \"{}\" && (\n                            <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                              Select someone from the Staff page\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.consultant === false &&\n                          this.context.selectedUser !== null && (\n                            <Row>\n                            <Card.Text>Add Consultant: {this.context.selectedUser.name}  ...</Card.Text>\n                            <Card.Text> To Paitient: {this.state.selectedPatient.name} ??</Card.Text>\n                            </Row>\n                          )}\n                          {this.state.createVisitChecklist.consultant === false &&\n                          this.context.selectedUser !== null && (\n                            <UpdatePatientConsultantForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientConsultantHandler}\n                              confirmText=\"Confirm\"\n                              consultant={this.context.selectedUser}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\n                            Complaint\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"2\">\n                          <Card.Body>\n                          Add Complaint form:\n                          {this.state.createVisitChecklist.complaint === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                              Complaint for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.complaint === false && (\n                            <UpdatePatientComplaintForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientComplaintHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\">\n                            Vitals\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"3\">\n                          <Card.Body>\n                          Add Vitals form:\n                          {this.state.createVisitChecklist.vitals === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Vitals for this Visit have already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.vitals === false && (\n                            <UpdatePatientVitalsForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientVitalsHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"4\">\n                            Examination\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"4\">\n                          <Card.Body>\n                          Add Examination form:\n                          {this.state.createVisitChecklist.examination === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Examination for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.examination === false && (\n                            <UpdatePatientExaminationForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientExaminationHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"5\">\n                            Survey\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"5\">\n                          <Card.Body>\n                          Add Survey form:\n                          {this.state.createVisitChecklist.survey === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Survey for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.survey === false && (\n                            <UpdatePatientSurveyForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientSurveyHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"22\">\n                            SystematicInquiry\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"22\">\n                          <Card.Body>\n                          Add Systematic Inquiry form:\n                          {this.state.createVisitChecklist.systematicInquiry === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Systematic Inquiry for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.systematicInquiry === false && (\n                            <UpdatePatientSystematicInquiryForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientSystematicInquiryHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"6\">\n                            Investigation\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"6\">\n                          <Card.Body>\n                          Add Investigation form:\n                          {this.state.createVisitChecklist.investigation === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Investigation for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.investigation === false && (\n                            <UpdatePatientInvestigationForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientInvestigationHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"7\">\n                            Diagnosis\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"7\">\n                          <Card.Body>\n                          Add Diagnosis form:\n                          {this.state.createVisitChecklist.diagnosis === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                              Diagnosis for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.diagnosis === false && (\n                            <UpdatePatientDiagnosisForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientDiagnosisHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"8\">\n                            Treatment\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"8\">\n                          <Card.Body>\n                          Add Treatment form:\n                          {this.state.createVisitChecklist.treatment === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Treatment for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.treatment === false && (\n                            <UpdatePatientTreatmentForm\n                              authUserId={this.context.userId}\n                              canCancel\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientTreatmentHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"9\">\n                            Billing\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"9\">\n                          <Card.Body>\n                          Add Billing form:\n                          {this.state.createVisitChecklist.billing === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                              Billing for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.billing === false && (\n                          <UpdatePatientBillingForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientBillingHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"23\">\n                            Vigilance\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"23\">\n                          <Card.Body>\n                          Add Vigilance form:\n                          {this.state.createVisitChecklist.vigilance === true && (\n                            <Button variant=\"warning\" size=\"lg\" className=\"formButton\">\n                            Vigilance for this Visit has already been added!!\n                            </Button>\n                          )}\n                          {this.state.createVisitChecklist.vigilance === false && (\n                            <UpdatePatientVigilanceForm\n                              authUserId={this.context.userId}\n                              canConfirm\n                              onCancel={this.modalCancelHandler}\n                              onConfirm={this.updatePatientVigilanceHandler}\n                              confirmText=\"Confirm\"\n                              patient={this.state.selectedPatient}\n                              visit\n                              onCreateVisitChecklistUpdate={this.createVisitChecklistUpdate}\n                            />\n                          )}\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                      <Card>\n                        <Card.Header>\n                          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"10\">\n                            Finished ?\n                          </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"10\">\n                          <Card.Body>\n                          <Button variant=\"success\" className=\"formButton\" onClick={this.newVisitComplete}>\n                          Done creating Visit\n                          </Button>\n                          </Card.Body>\n                        </Accordion.Collapse>\n                      </Card>\n                    </Accordion>\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditDemographics\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit Demographics</Button>\n                )}\n                {this.state.updating &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditField\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" size=\"lg\" className=\"confirmEditButton\" onClick={this.startUpdatePatientHandler}>Edit a Single Field</Button>\n                )}\n                {this.state.updating &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientFieldForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmUpdateFieldHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditConsultant\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='consultant' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add a Consultant</Button>\n                )}\n                {this.state.patientUpdateField === 'consultant' &&\n                this.state.selectedPatient !== null &&\n                this.context.selectedUser === null && (\n                  <Row>\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select someone from the Staff page\n                  </Button>\n                  </Row>\n                )}\n                {this.state.patientUpdateField === 'consultant' &&\n                this.state.selectedPatient !== null && (\n                  <Row>\n                  <p>Add Consultant: {this.context.selectedUser.name}  ...</p>\n                  <p> To Paitient: {this.state.selectedPatient.name} ??</p>\n                  </Row>\n                )}\n                {this.state.patientUpdateField === 'consultant' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientConsultantForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientConsultantHandler}\n                    confirmText=\"Confirm\"\n                    consultant={this.context.selectedUser}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditInsurance\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='insurance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Insurance</Button>\n                )}\n                {this.state.patientUpdateField === 'insurance' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientInsuranceForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientInsuranceHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditNextOfKin\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='nextOfKin' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add NextOfKin</Button>\n                )}\n                {this.state.patientUpdateField === 'nextOfKin' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientNextOfKinForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientNextOfKinHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditComplaint\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='complaint' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add History</Button>\n                )}\n                {this.state.patientUpdateField === 'complaint' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientComplaintForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientComplaintHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditSurvey\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='survey' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Survey</Button>\n                )}\n                {this.state.patientUpdateField === 'survey' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientSurveyForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientSurveyHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditSystematicInquiry\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='systematicInquiry' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Systematic Inquiry</Button>\n                )}\n                {this.state.patientUpdateField === 'systematicInquiry' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientSystematicInquiryForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientSystematicInquiryHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditVitals\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='vitals' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vitals</Button>\n                )}\n                {this.state.patientUpdateField === 'vitals' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientVitalsForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientVitalsHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditExamination\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='examintion' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Examination</Button>\n                )}\n                {this.state.patientUpdateField === 'examintion' &&\n                this.state.selectedPatient !== null && (\n                  <UpdatePatientExaminationForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientExaminationHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditHistory\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='history' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Past History</Button>\n                )}\n                {this.state.patientUpdateField === 'history' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientHistoryForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientHistoryHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditAllergies\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='allergies' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Allergies</Button>\n                )}\n                {this.state.patientUpdateField === 'allergies' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientAllergiesForm\n                    authUserId={this.context.userId}\n                    canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientAllergiesHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditMedication\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='medication' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Medication</Button>\n                )}\n                {this.state.patientUpdateField === 'medication' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientMedicationForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.updatePatientMedicationHandler}\n                    confirmText=\"Confirm\"\n                    patient={this.state.selectedPatient}\n                  />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditInvestigation\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='investigation' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Investigation</Button>\n                )}\n                {this.state.patientUpdateField === 'investigation' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientInvestigationForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientInvestigationHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditDiagnosis\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='diagnosis' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Diagnosis</Button>\n                )}\n                {this.state.patientUpdateField === 'diagnosis' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientDiagnosisForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientDiagnosisHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditTreatment\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='treatment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Treatment</Button>\n                )}\n                {this.state.patientUpdateField === 'treatment' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientTreatmentForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientTreatmentHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditBilling\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='billing' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Billing</Button>\n                )}\n                {this.state.patientUpdateField === 'billing' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientBillingForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientBillingHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditVigilance\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='vigilance' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Vigilance</Button>\n                )}\n                {this.state.patientUpdateField === 'vigilance' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientVigilanceForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientVigilanceHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditAttachment\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='attachment' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Attachment</Button>\n                )}\n                {this.state.patientUpdateField === 'attachment' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientAttachmentForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientAttachmentHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                      )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditNote\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='notes' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Note</Button>\n                )}\n                {this.state.patientUpdateField === 'notes' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientNoteForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientNoteHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                      )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"patientEditTag\">\n                {this.state.selectedPatient === null && (\n                  <Button variant=\"outline-warning\" size=\"lg\" className=\"confirmEditButton\">\n                    Select a Patient from the Master List\n                  </Button>\n                )}\n                {this.state.selectedPatient !== null && (\n                  <Button variant=\"outline-primary\" value='tags' size=\"lg\" className=\"confirmEditButton\" onClick={this.updatePatientSpecial.bind(this)}>Add Tag</Button>\n                )}\n                {this.state.patientUpdateField === 'tags' &&\n                this.state.selectedPatient !== null\n                && (\n                  <UpdatePatientTagForm\n                        authUserId={this.context.userId}\n                        canCancel\n                          canConfirm\n                          onCancel={this.modalCancelHandler}\n                          onConfirm={this.updatePatientTagHandler}\n                          confirmText=\"Confirm\"\n                          patient={this.state.selectedPatient}\n                        />\n                      )}\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"MasterList\">\n                <Container className=\"containerUserMasterList\">\n                <Row className=\"searchListRow\">\n                <Button variant=\"primary\" size=\"sm\" onClick={this.fetchPatientsAsc}>\n                   Sort Asc\n                 </Button>\n                <Button variant=\"info\" size=\"sm\" onClick={this.fetchPatientsDesc}>\n                   Sort Desc\n                 </Button>\n                {this.state.isLoading ? (\n                  <Spinner />\n                ) : (\n                  <PatientList\n                    patients={this.state.patients}\n                    authUserId={this.context.userId}\n                    onViewDetail={this.showDetailHandler}\n                  />\n                )}\n                </Row>\n                </Container>\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"SearchInput\">\n                <Container className=\"containerSearchUserInput\">\n                  {this.context.token && (\n                  <Row className=\"searchUserRowAdd\">\n                  <Button variant=\"primary\" onClick={this.startSearchPatientHandler}>Search</Button>\n                  </Row>\n                )}\n\n                <Row className=\"searchUserRowForm\">\n                <Col md={10} className=\"searchUserColForm\">\n                <Tabs defaultActiveKey=\"Field\" id=\"uncontrolled-tab-example\">\n                <Tab eventKey=\"Search\" title=\"Search:\" disabled>\n                </Tab>\n                <Tab eventKey=\"Field\" title=\"Search by Field:\">\n                {this.state.searching !== true && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Click the 'Search' Button start\n                  </Button>\n                )}\n                {this.state.searching === true && (\n                  <SearchPatientForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchHandler}\n                    confirmText=\"Search\"\n                    patient={this.context.selectedPatient}\n                  />\n                )}\n                </Tab>\n                <Tab eventKey=\"Id\" title=\"Search by ID:\">\n                {this.state.searching !== true && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Click the 'Search' Button start\n                  </Button>\n                )}\n                {this.state.searching === true && (\n                  <SearchPatientIdForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchIdHandler}\n                    confirmText=\"Search\"\n                    patient={this.context.selectedPatient}\n                  />\n                )}\n                </Tab>\n\n                <Tab eventKey=\"Name\" title=\"Search by Name:\">\n                {this.state.searching !== true && (\n                  <Button variant=\"outline-warning\" className=\"confirmEditButton\" size=\"lg\">\n                    Click the 'Search' Button start\n                  </Button>\n                )}\n                {this.state.searching === true && (\n                  <SearchPatientNameForm\n                  authUserId={this.context.userId}\n                  canCancel\n                    canConfirm\n                    onCancel={this.modalCancelHandler}\n                    onConfirm={this.modalConfirmSearchNameHandler}\n                    confirmText=\"Search\"\n                    patient={this.context.selectedPatient}\n                  />\n                )}\n                </Tab>\n                </Tabs>\n                </Col>\n                </Row>\n                </Container>\n              </Tab.Pane>\n\n              <Tab.Pane eventKey=\"SearchResult\">\n                <Container className=\"containerSearchUserResults\">\n                <Row>\n                  <Card className=\"searchCard\">\n                    <Card.Body className=\"searchCardBody\">\n                      <Card.Title>Your Search</Card.Title>\n                      <Card.Text>\n                        Field: {this.state.patientSearchField}\n                      </Card.Text>\n                      <Card.Text>\n                        Query: {this.state.patientSearchQuery}\n                      </Card.Text>\n                    </Card.Body>\n                  </Card>\n                </Row>\n                <Row className=\"searchListRow\">\n                {\n                  this.state.searchPatients !== [] &&\n                  <SearchPatientList\n                    searchPatients={this.state.searchPatients}\n                    authUserId={this.context.userId}\n                    onCancel={this.modalCancelHandler}\n                      onViewDetail={this.showDetailHandler}\n                  />\n                }\n                </Row>\n                </Container>\n              </Tab.Pane>\n            </Tab.Content>\n          </Col>\n        </Row>\n      </Tab.Container>\n    </Container>\n    </Col>\n    </Row>\n\n</Accordion>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PatientsPage;\n"]},"metadata":{},"sourceType":"module"}