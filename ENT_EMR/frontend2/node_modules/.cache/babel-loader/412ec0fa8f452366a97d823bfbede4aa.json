{"ast":null,"code":"var _jsxFileName = \"/Users/pedrojacob/Downloads/AMR/websites/blackStarMind_app_dev/black_star_mind/black-star-mind-app/src/pages/Auth.js\";\nimport React, { Component } from 'react';\nimport './Auth.css';\nimport AuthContext from '../context/auth-context'; // import ThisUserContext from '../context/thisUser-context';\n\nclass AuthPage extends Component {\n  // state = {\n  //   isLogin: true\n  // };\n  // static contextType = ThisUserContext;\n  constructor(props) {\n    super(props);\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      const email = this.emailEl.current.value;\n      const password = this.passwordEl.current.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0) {\n        return;\n      }\n\n      let requestBody = {\n        query: \"\\n        query Login($email: String!, $password: String!) {\\n          login(email: $email, password: $password) {\\n            userId\\n            token\\n            tokenExpiration\\n          }\\n        }\\n      \",\n        variables: {\n          email: email,\n          password: password\n        }\n      };\n      fetch('http://localhost:5000/graphql', {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(\"your data... \" + JSON.stringify(resData));\n\n        if (resData.data.login.token) {\n          this.context.login(resData.data.login.token, resData.data.login.userId, resData.data.login.tokenExpiration);\n          sessionStorage.setItem('login info', this.context.login);\n          this.context.action1 = JSON.stringify(requestBody);\n          console.log(\"this context object...\" + JSON.stringify(this.context));\n          console.log(\"this context action1...\" + this.context.action1);\n          this.createAction(this.context.id, \"mutation\", this.context.action1);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.emailEl = React.createRef();\n    this.passwordEl = React.createRef();\n  } // switchModeHandler = () => {\n  //   this.setState(prevState => {\n  //     return { isLogin: !prevState.isLogin };\n  //   });\n  // };\n\n\n  createAction(creatorId, type, body) {\n    console.log(\"'create actions function' context object... \" + JSON.stringify(this.context));\n    console.log(\"args.creatorId...\" + creatorId, \"action type...\" + type, \"action body...\" + body);\n    const userId = creatorId;\n    const token = this.context.token;\n    const requestBody = {\n      query: \"\\n          mutation createAction($userId: ID!, $type: String!, $body: String!) {\\n            createAction(userId: $userId, actionInput: {type: $type, body: $body}) {\\n              _id\\n              creator\\n              {_id,username}\\n              body\\n            }\\n          }\\n        \",\n      variables: {\n        userId: userId,\n        type: type,\n        body: body\n      }\n    };\n    fetch('http://localhost:5000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    }).then(res => {\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error('Failed!');\n      }\n\n      return res.json();\n    }).then(resData => {\n      console.log(\"response data... \" + JSON.stringify(resData));\n      this.context.action1 = null;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"auth-form\",\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"E-Mail\"), React.createElement(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      ref: this.emailEl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      id: \"password\",\n      ref: this.passwordEl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nAuthPage.contextType = AuthContext;\nexport default AuthPage;","map":{"version":3,"sources":["/Users/pedrojacob/Downloads/AMR/websites/blackStarMind_app_dev/black_star_mind/black-star-mind-app/src/pages/Auth.js"],"names":["React","Component","AuthContext","AuthPage","constructor","props","submitHandler","event","preventDefault","email","emailEl","current","value","password","passwordEl","trim","length","requestBody","query","variables","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","console","log","data","login","token","context","userId","tokenExpiration","sessionStorage","setItem","action1","createAction","id","catch","err","createRef","creatorId","type","Authorization","render","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport './Auth.css';\nimport AuthContext from '../context/auth-context';\n// import ThisUserContext from '../context/thisUser-context';\n\nclass AuthPage extends Component {\n  // state = {\n  //   isLogin: true\n  // };\n\n  static contextType = AuthContext;\n  // static contextType = ThisUserContext;\n\n  constructor(props) {\n    super(props);\n    this.emailEl = React.createRef();\n    this.passwordEl = React.createRef();\n  }\n\n  // switchModeHandler = () => {\n  //   this.setState(prevState => {\n  //     return { isLogin: !prevState.isLogin };\n  //   });\n  // };\n\n  createAction(creatorId,type,body) {\n\n    console.log(\"'create actions function' context object... \" + JSON.stringify(this.context));\n    console.log(\"args.creatorId...\" + creatorId, \"action type...\" + type, \"action body...\" + body);\n    const userId = creatorId;\n    const token = this.context.token;\n\n    const requestBody = {\n      query: `\n          mutation createAction($userId: ID!, $type: String!, $body: String!) {\n            createAction(userId: $userId, actionInput: {type: $type, body: $body}) {\n              _id\n              creator\n              {_id,username}\n              body\n            }\n          }\n        `,\n        variables: {\n          userId: userId,\n          type: type,\n          body: body\n        }\n    };\n\n    fetch('http://localhost:5000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + token\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n\n        console.log(\"response data... \" + JSON.stringify(resData));\n        this.context.action1 = null; \n\n          })\n      .catch(err => {\n        console.log(err);\n      });\n\n  }\n\n\n  submitHandler = event => {\n    event.preventDefault();\n    const email = this.emailEl.current.value;\n    const password = this.passwordEl.current.value;\n\n    if (email.trim().length === 0 || password.trim().length === 0) {\n      return;\n    }\n\n    let requestBody = {\n      query: `\n        query Login($email: String!, $password: String!) {\n          login(email: $email, password: $password) {\n            userId\n            token\n            tokenExpiration\n          }\n        }\n      `,\n      variables: {\n        email: email,\n        password: password\n      }\n    };\n\n\n    fetch('http://localhost:5000/graphql', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(\"your data... \" + JSON.stringify(resData));\n        if (resData.data.login.token) {\n          this.context.login(\n            resData.data.login.token,\n            resData.data.login.userId,\n            resData.data.login.tokenExpiration\n          );\n\n          sessionStorage.setItem('login info', this.context.login )\n\n          this.context.action1 = JSON.stringify(requestBody);\n          console.log(\"this context object...\" + JSON.stringify(this.context));\n          console.log(\"this context action1...\" + this.context.action1);\n\n          this.createAction(this.context.id,\"mutation\",this.context.action1);\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      <form className=\"auth-form\" onSubmit={this.submitHandler}>\n        <div className=\"form-control\">\n          <label htmlFor=\"email\">E-Mail</label>\n          <input type=\"email\" id=\"email\" ref={this.emailEl} />\n        </div>\n        <div className=\"form-control\">\n          <label htmlFor=\"password\">Password</label>\n          <input type=\"password\" id=\"password\" ref={this.passwordEl} />\n        </div>\n        <div className=\"form-actions\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default AuthPage;\n"]},"metadata":{},"sourceType":"module"}